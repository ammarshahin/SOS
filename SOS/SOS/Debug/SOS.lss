
SOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001142  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00001142  000011d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000033  00800070  00800070  000011e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001218  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  00001254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d38  00000000  00000000  0000150c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b04  00000000  00000000  00003244  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c8c  00000000  00000000  00003d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b88  00000000  00000000  000059d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010f3  00000000  00000000  0000655c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018d0  00000000  00000000  0000764f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  00008f1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 fc 07 	jmp	0xff8	; 0xff8 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e4       	ldi	r30, 0x42	; 66
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3a       	cpi	r26, 0xA3	; 163
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 75 00 	call	0xea	; 0xea <main>
      8a:	0c 94 9f 08 	jmp	0x113e	; 0x113e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Task1>:
#include "SOS.h"
#include "Led.h"


void Task1(void)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	Led_Tog(LED0);
      9a:	80 e1       	ldi	r24, 0x10	; 16
      9c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Led_Tog>
}
      a0:	00 00       	nop
      a2:	df 91       	pop	r29
      a4:	cf 91       	pop	r28
      a6:	08 95       	ret

000000a8 <Task2>:

void Task2(void)
{
      a8:	cf 93       	push	r28
      aa:	df 93       	push	r29
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
	Led_Tog(LED1);
      b0:	80 e2       	ldi	r24, 0x20	; 32
      b2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Led_Tog>
}
      b6:	00 00       	nop
      b8:	df 91       	pop	r29
      ba:	cf 91       	pop	r28
      bc:	08 95       	ret

000000be <Task3>:

void Task3(void)
{
      be:	cf 93       	push	r28
      c0:	df 93       	push	r29
      c2:	cd b7       	in	r28, 0x3d	; 61
      c4:	de b7       	in	r29, 0x3e	; 62
	Led_Tog(LED2);
      c6:	80 e4       	ldi	r24, 0x40	; 64
      c8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Led_Tog>
}
      cc:	00 00       	nop
      ce:	df 91       	pop	r29
      d0:	cf 91       	pop	r28
      d2:	08 95       	ret

000000d4 <Task4>:

void Task4(void)
{
      d4:	cf 93       	push	r28
      d6:	df 93       	push	r29
      d8:	cd b7       	in	r28, 0x3d	; 61
      da:	de b7       	in	r29, 0x3e	; 62
	
	Led_Tog(LED3);
      dc:	80 e8       	ldi	r24, 0x80	; 128
      de:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Led_Tog>
}
      e2:	00 00       	nop
      e4:	df 91       	pop	r29
      e6:	cf 91       	pop	r28
      e8:	08 95       	ret

000000ea <main>:


int main(void)
{
      ea:	cf 93       	push	r28
      ec:	df 93       	push	r29
      ee:	cd b7       	in	r28, 0x3d	; 61
      f0:	de b7       	in	r29, 0x3e	; 62
	/* Initializing the Led To indicate The Tasks */
	Led_Init(LED0);
      f2:	80 e1       	ldi	r24, 0x10	; 16
      f4:	0e 94 aa 00 	call	0x154	; 0x154 <Led_Init>
	Led_Init(LED1);
      f8:	80 e2       	ldi	r24, 0x20	; 32
      fa:	0e 94 aa 00 	call	0x154	; 0x154 <Led_Init>
	Led_Init(LED2);
      fe:	80 e4       	ldi	r24, 0x40	; 64
     100:	0e 94 aa 00 	call	0x154	; 0x154 <Led_Init>
	Led_Init(LED3);
     104:	80 e8       	ldi	r24, 0x80	; 128
     106:	0e 94 aa 00 	call	0x154	; 0x154 <Led_Init>
	
	Sos_Init();	
     10a:	0e 94 44 01 	call	0x288	; 0x288 <Sos_Init>
	
	Sos_Create_Task(Task1,5,300);
     10e:	4c e2       	ldi	r20, 0x2C	; 44
     110:	51 e0       	ldi	r21, 0x01	; 1
     112:	65 e0       	ldi	r22, 0x05	; 5
     114:	89 e4       	ldi	r24, 0x49	; 73
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	0e 94 cd 01 	call	0x39a	; 0x39a <Sos_Create_Task>
	Sos_Create_Task(Task2,4,150);
     11c:	46 e9       	ldi	r20, 0x96	; 150
     11e:	50 e0       	ldi	r21, 0x00	; 0
     120:	64 e0       	ldi	r22, 0x04	; 4
     122:	84 e5       	ldi	r24, 0x54	; 84
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	0e 94 cd 01 	call	0x39a	; 0x39a <Sos_Create_Task>
	Sos_Create_Task(Task3,3,75);
     12a:	4b e4       	ldi	r20, 0x4B	; 75
     12c:	50 e0       	ldi	r21, 0x00	; 0
     12e:	63 e0       	ldi	r22, 0x03	; 3
     130:	8f e5       	ldi	r24, 0x5F	; 95
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	0e 94 cd 01 	call	0x39a	; 0x39a <Sos_Create_Task>
	Sos_Create_Task(Task4,2,30);
     138:	4e e1       	ldi	r20, 0x1E	; 30
     13a:	50 e0       	ldi	r21, 0x00	; 0
     13c:	62 e0       	ldi	r22, 0x02	; 2
     13e:	8a e6       	ldi	r24, 0x6A	; 106
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	0e 94 cd 01 	call	0x39a	; 0x39a <Sos_Create_Task>
		
	Sos_Run();
     146:	0e 94 63 02 	call	0x4c6	; 0x4c6 <Sos_Run>
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
}
     14e:	df 91       	pop	r29
     150:	cf 91       	pop	r28
     152:	08 95       	ret

00000154 <Led_Init>:
		Gpio_PinWrite(LED_PORT,LED3,FALSE);
		break;
		default:
		break;
	}
}
     154:	cf 93       	push	r28
     156:	df 93       	push	r29
     158:	1f 92       	push	r1
     15a:	cd b7       	in	r28, 0x3d	; 61
     15c:	de b7       	in	r29, 0x3e	; 62
     15e:	89 83       	std	Y+1, r24	; 0x01
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	88 2f       	mov	r24, r24
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	80 32       	cpi	r24, 0x20	; 32
     168:	91 05       	cpc	r25, r1
     16a:	c1 f0       	breq	.+48     	; 0x19c <Led_Init+0x48>
     16c:	81 32       	cpi	r24, 0x21	; 33
     16e:	91 05       	cpc	r25, r1
     170:	1c f4       	brge	.+6      	; 0x178 <Led_Init+0x24>
     172:	40 97       	sbiw	r24, 0x10	; 16
     174:	41 f0       	breq	.+16     	; 0x186 <Led_Init+0x32>
     176:	33 c0       	rjmp	.+102    	; 0x1de <Led_Init+0x8a>
     178:	80 34       	cpi	r24, 0x40	; 64
     17a:	91 05       	cpc	r25, r1
     17c:	d1 f0       	breq	.+52     	; 0x1b2 <Led_Init+0x5e>
     17e:	80 38       	cpi	r24, 0x80	; 128
     180:	91 05       	cpc	r25, r1
     182:	11 f1       	breq	.+68     	; 0x1c8 <Led_Init+0x74>
     184:	2c c0       	rjmp	.+88     	; 0x1de <Led_Init+0x8a>
     186:	4f ef       	ldi	r20, 0xFF	; 255
     188:	60 e1       	ldi	r22, 0x10	; 16
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	0e 94 47 03 	call	0x68e	; 0x68e <Gpio_PinDirection>
     190:	40 e0       	ldi	r20, 0x00	; 0
     192:	60 e1       	ldi	r22, 0x10	; 16
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <Gpio_PinWrite>
     19a:	21 c0       	rjmp	.+66     	; 0x1de <Led_Init+0x8a>
     19c:	4f ef       	ldi	r20, 0xFF	; 255
     19e:	60 e2       	ldi	r22, 0x20	; 32
     1a0:	81 e0       	ldi	r24, 0x01	; 1
     1a2:	0e 94 47 03 	call	0x68e	; 0x68e <Gpio_PinDirection>
     1a6:	40 e0       	ldi	r20, 0x00	; 0
     1a8:	60 e2       	ldi	r22, 0x20	; 32
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <Gpio_PinWrite>
     1b0:	16 c0       	rjmp	.+44     	; 0x1de <Led_Init+0x8a>
     1b2:	4f ef       	ldi	r20, 0xFF	; 255
     1b4:	60 e4       	ldi	r22, 0x40	; 64
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	0e 94 47 03 	call	0x68e	; 0x68e <Gpio_PinDirection>
     1bc:	40 e0       	ldi	r20, 0x00	; 0
     1be:	60 e4       	ldi	r22, 0x40	; 64
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <Gpio_PinWrite>
     1c6:	0b c0       	rjmp	.+22     	; 0x1de <Led_Init+0x8a>
     1c8:	4f ef       	ldi	r20, 0xFF	; 255
     1ca:	60 e8       	ldi	r22, 0x80	; 128
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	0e 94 47 03 	call	0x68e	; 0x68e <Gpio_PinDirection>
     1d2:	40 e0       	ldi	r20, 0x00	; 0
     1d4:	60 e8       	ldi	r22, 0x80	; 128
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <Gpio_PinWrite>
     1dc:	00 00       	nop
     1de:	00 00       	nop
     1e0:	0f 90       	pop	r0
     1e2:	df 91       	pop	r29
     1e4:	cf 91       	pop	r28
     1e6:	08 95       	ret

000001e8 <Led_Tog>:
/**
 * Description: Function to Toggle the Led.
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3]
 */
void Led_Tog(led led_Num)
{
     1e8:	cf 93       	push	r28
     1ea:	df 93       	push	r29
     1ec:	1f 92       	push	r1
     1ee:	cd b7       	in	r28, 0x3d	; 61
     1f0:	de b7       	in	r29, 0x3e	; 62
     1f2:	89 83       	std	Y+1, r24	; 0x01
	switch(led_Num)
     1f4:	89 81       	ldd	r24, Y+1	; 0x01
     1f6:	88 2f       	mov	r24, r24
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	80 32       	cpi	r24, 0x20	; 32
     1fc:	91 05       	cpc	r25, r1
     1fe:	91 f0       	breq	.+36     	; 0x224 <Led_Tog+0x3c>
     200:	81 32       	cpi	r24, 0x21	; 33
     202:	91 05       	cpc	r25, r1
     204:	1c f4       	brge	.+6      	; 0x20c <Led_Tog+0x24>
     206:	40 97       	sbiw	r24, 0x10	; 16
     208:	41 f0       	breq	.+16     	; 0x21a <Led_Tog+0x32>
		break;
		case LED3 :
		Gpio_PinToggle(LED_PORT,LED3);
		break;
		default:
		break;
     20a:	1b c0       	rjmp	.+54     	; 0x242 <Led_Tog+0x5a>
 * Description: Function to Toggle the Led.
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3]
 */
void Led_Tog(led led_Num)
{
	switch(led_Num)
     20c:	80 34       	cpi	r24, 0x40	; 64
     20e:	91 05       	cpc	r25, r1
     210:	71 f0       	breq	.+28     	; 0x22e <Led_Tog+0x46>
     212:	80 38       	cpi	r24, 0x80	; 128
     214:	91 05       	cpc	r25, r1
     216:	81 f0       	breq	.+32     	; 0x238 <Led_Tog+0x50>
		break;
		case LED3 :
		Gpio_PinToggle(LED_PORT,LED3);
		break;
		default:
		break;
     218:	14 c0       	rjmp	.+40     	; 0x242 <Led_Tog+0x5a>
void Led_Tog(led led_Num)
{
	switch(led_Num)
	{
		case LED0 :
		Gpio_PinToggle(LED_PORT,LED0);
     21a:	60 e1       	ldi	r22, 0x10	; 16
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	0e 94 92 04 	call	0x924	; 0x924 <Gpio_PinToggle>
		break;
     222:	0f c0       	rjmp	.+30     	; 0x242 <Led_Tog+0x5a>
		case LED1 :
		Gpio_PinToggle(LED_PORT,LED1);
     224:	60 e2       	ldi	r22, 0x20	; 32
     226:	81 e0       	ldi	r24, 0x01	; 1
     228:	0e 94 92 04 	call	0x924	; 0x924 <Gpio_PinToggle>
		break;
     22c:	0a c0       	rjmp	.+20     	; 0x242 <Led_Tog+0x5a>
		case LED2 :
		Gpio_PinToggle(LED_PORT,LED2);
     22e:	60 e4       	ldi	r22, 0x40	; 64
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	0e 94 92 04 	call	0x924	; 0x924 <Gpio_PinToggle>
		break;
     236:	05 c0       	rjmp	.+10     	; 0x242 <Led_Tog+0x5a>
		case LED3 :
		Gpio_PinToggle(LED_PORT,LED3);
     238:	60 e8       	ldi	r22, 0x80	; 128
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	0e 94 92 04 	call	0x924	; 0x924 <Gpio_PinToggle>
		break;
     240:	00 00       	nop
		default:
		break;
	}
     242:	00 00       	nop
     244:	0f 90       	pop	r0
     246:	df 91       	pop	r29
     248:	cf 91       	pop	r28
     24a:	08 95       	ret

0000024c <TimerSysticCallback>:
 * Function : TimerSysticCallback
 * Description: this function is Called by the ISR to Update the System Ticks
 * @return void 
 */
static void TimerSysticCallback(void)
{
     24c:	cf 93       	push	r28
     24e:	df 93       	push	r29
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
	Systick++;
     254:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     258:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     25c:	01 96       	adiw	r24, 0x01	; 1
     25e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     262:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	if (Systick == 65000u)
     266:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     26a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     26e:	88 3e       	cpi	r24, 0xE8	; 232
     270:	9d 4f       	sbci	r25, 0xFD	; 253
     272:	31 f4       	brne	.+12     	; 0x280 <TimerSysticCallback+0x34>
	{
		Systick = 1;
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     27c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	}
}
     280:	00 00       	nop
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	08 95       	ret

00000288 <Sos_Init>:
 * Function : Sos_Init
 * Description: this function is to initialize the SOS
 * @return Status: of the initialization according to the Error handling macros 
 */
EnumSOSError_type Sos_Init(void)
{
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	00 d0       	rcall	.+0      	; 0x28e <Sos_Init+0x6>
     28e:	00 d0       	rcall	.+0      	; 0x290 <Sos_Init+0x8>
     290:	00 d0       	rcall	.+0      	; 0x292 <Sos_Init+0xa>
     292:	cd b7       	in	r28, 0x3d	; 61
     294:	de b7       	in	r29, 0x3e	; 62
	uint8 index;
	EnumSOSError_type API_State = OK_T;
     296:	1a 82       	std	Y+2, r1	; 0x02
	
	/* Enable the Global Interrupt */
	Interrupts_On();
     298:	0e 94 dd 04 	call	0x9ba	; 0x9ba <Interrupts_On>
	
	/* Set the Sleep Mode To Idle */
	set_sleep_mode(SLEEP_MODE_IDLE);
     29c:	85 e5       	ldi	r24, 0x55	; 85
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	25 e5       	ldi	r18, 0x55	; 85
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	f9 01       	movw	r30, r18
     2a6:	20 81       	ld	r18, Z
     2a8:	2f 78       	andi	r18, 0x8F	; 143
     2aa:	fc 01       	movw	r30, r24
     2ac:	20 83       	st	Z, r18

	/* Set the Systick of the Timer ISR */
	uint32 TimerCount_Time = MILLISECONSD_TO_MICROSECONSD_FACTOR * Systick;
     2ae:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__data_start>
     2b2:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__data_start+0x1>
     2b6:	28 ee       	ldi	r18, 0xE8	; 232
     2b8:	33 e0       	ldi	r19, 0x03	; 3
     2ba:	42 9f       	mul	r20, r18
     2bc:	c0 01       	movw	r24, r0
     2be:	43 9f       	mul	r20, r19
     2c0:	90 0d       	add	r25, r0
     2c2:	52 9f       	mul	r21, r18
     2c4:	90 0d       	add	r25, r0
     2c6:	11 24       	eor	r1, r1
     2c8:	cc 01       	movw	r24, r24
     2ca:	a0 e0       	ldi	r26, 0x00	; 0
     2cc:	b0 e0       	ldi	r27, 0x00	; 0
     2ce:	8b 83       	std	Y+3, r24	; 0x03
     2d0:	9c 83       	std	Y+4, r25	; 0x04
     2d2:	ad 83       	std	Y+5, r26	; 0x05
     2d4:	be 83       	std	Y+6, r27	; 0x06
	
	/* Set the timer Call Back Value */
	Timers_SetCallBack(TimerSysticCallback);
     2d6:	86 e2       	ldi	r24, 0x26	; 38
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <Timers_SetCallBack>
	
	/* Initialize the Buffer used in the SOS */
	for(index = INITIAL_ZERO; index < SOS_MAX_NUMBER_OF_TASKS ; index++)
     2de:	19 82       	std	Y+1, r1	; 0x01
     2e0:	3d c0       	rjmp	.+122    	; 0x35c <Sos_Init+0xd4>
	{
		StrArrOfTasks[index].Periodicity = INITIAL_ZERO;
     2e2:	89 81       	ldd	r24, Y+1	; 0x01
     2e4:	28 2f       	mov	r18, r24
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	c9 01       	movw	r24, r18
     2ea:	88 0f       	add	r24, r24
     2ec:	99 1f       	adc	r25, r25
     2ee:	82 0f       	add	r24, r18
     2f0:	93 1f       	adc	r25, r19
     2f2:	88 0f       	add	r24, r24
     2f4:	99 1f       	adc	r25, r25
     2f6:	8d 58       	subi	r24, 0x8D	; 141
     2f8:	9f 4f       	sbci	r25, 0xFF	; 255
     2fa:	fc 01       	movw	r30, r24
     2fc:	11 82       	std	Z+1, r1	; 0x01
     2fe:	10 82       	st	Z, r1
		StrArrOfTasks[index].Priority = INITIAL_ZERO;
     300:	89 81       	ldd	r24, Y+1	; 0x01
     302:	28 2f       	mov	r18, r24
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	c9 01       	movw	r24, r18
     308:	88 0f       	add	r24, r24
     30a:	99 1f       	adc	r25, r25
     30c:	82 0f       	add	r24, r18
     30e:	93 1f       	adc	r25, r19
     310:	88 0f       	add	r24, r24
     312:	99 1f       	adc	r25, r25
     314:	8e 58       	subi	r24, 0x8E	; 142
     316:	9f 4f       	sbci	r25, 0xFF	; 255
     318:	fc 01       	movw	r30, r24
     31a:	10 82       	st	Z, r1
		StrArrOfTasks[index].TaskState = TaskDormint;
     31c:	89 81       	ldd	r24, Y+1	; 0x01
     31e:	28 2f       	mov	r18, r24
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	c9 01       	movw	r24, r18
     324:	88 0f       	add	r24, r24
     326:	99 1f       	adc	r25, r25
     328:	82 0f       	add	r24, r18
     32a:	93 1f       	adc	r25, r19
     32c:	88 0f       	add	r24, r24
     32e:	99 1f       	adc	r25, r25
     330:	8b 58       	subi	r24, 0x8B	; 139
     332:	9f 4f       	sbci	r25, 0xFF	; 255
     334:	fc 01       	movw	r30, r24
     336:	10 82       	st	Z, r1
		StrArrOfTasks[index].PtrTask = NULL;
     338:	89 81       	ldd	r24, Y+1	; 0x01
     33a:	28 2f       	mov	r18, r24
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	c9 01       	movw	r24, r18
     340:	88 0f       	add	r24, r24
     342:	99 1f       	adc	r25, r25
     344:	82 0f       	add	r24, r18
     346:	93 1f       	adc	r25, r19
     348:	88 0f       	add	r24, r24
     34a:	99 1f       	adc	r25, r25
     34c:	80 59       	subi	r24, 0x90	; 144
     34e:	9f 4f       	sbci	r25, 0xFF	; 255
     350:	fc 01       	movw	r30, r24
     352:	11 82       	std	Z+1, r1	; 0x01
     354:	10 82       	st	Z, r1
	
	/* Set the timer Call Back Value */
	Timers_SetCallBack(TimerSysticCallback);
	
	/* Initialize the Buffer used in the SOS */
	for(index = INITIAL_ZERO; index < SOS_MAX_NUMBER_OF_TASKS ; index++)
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	8f 5f       	subi	r24, 0xFF	; 255
     35a:	89 83       	std	Y+1, r24	; 0x01
     35c:	89 81       	ldd	r24, Y+1	; 0x01
     35e:	86 30       	cpi	r24, 0x06	; 6
     360:	08 f4       	brcc	.+2      	; 0x364 <Sos_Init+0xdc>
     362:	bf cf       	rjmp	.-130    	; 0x2e2 <Sos_Init+0x5a>
		Timers_Start(TIMER_0);
		break;
		
		case TIMER_1:
		/* Initialize the Timer Used  */
		Timers_Init(&timer1_cfg_s);
     364:	85 e6       	ldi	r24, 0x65	; 101
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	0e 94 ee 04 	call	0x9dc	; 0x9dc <Timers_Init>
		
		/* Set the default resolution  */
		Timers_SetCounter(TIMER_1,TimerCount_Time);
     36c:	8b 81       	ldd	r24, Y+3	; 0x03
     36e:	9c 81       	ldd	r25, Y+4	; 0x04
     370:	ad 81       	ldd	r26, Y+5	; 0x05
     372:	be 81       	ldd	r27, Y+6	; 0x06
     374:	ac 01       	movw	r20, r24
     376:	bd 01       	movw	r22, r26
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	0e 94 61 06 	call	0xcc2	; 0xcc2 <Timers_SetCounter>
		
		/* Start the Timer Used  */
		Timers_Start(TIMER_1);
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	0e 94 ab 07 	call	0xf56	; 0xf56 <Timers_Start>
		break;
     384:	00 00       	nop
		break;
		default:
		API_State = ERROR_INVALID_INPUT;
		break;
	}
	return API_State;
     386:	8a 81       	ldd	r24, Y+2	; 0x02
}
     388:	26 96       	adiw	r28, 0x06	; 6
     38a:	0f b6       	in	r0, 0x3f	; 63
     38c:	f8 94       	cli
     38e:	de bf       	out	0x3e, r29	; 62
     390:	0f be       	out	0x3f, r0	; 63
     392:	cd bf       	out	0x3d, r28	; 61
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	08 95       	ret

0000039a <Sos_Create_Task>:
 * @param PtrFunc: 
					i/p: Pointer to the Task
 * @return EnmTMUError_t: the status of the function according to the Error handling Enum 
 */
EnumSOSError_type Sos_Create_Task(v_PtrFunc_v_type PtrFunc,uint8 priority, uint16 periodicity)
{
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	cd b7       	in	r28, 0x3d	; 61
     3a0:	de b7       	in	r29, 0x3e	; 62
     3a2:	27 97       	sbiw	r28, 0x07	; 7
     3a4:	0f b6       	in	r0, 0x3f	; 63
     3a6:	f8 94       	cli
     3a8:	de bf       	out	0x3e, r29	; 62
     3aa:	0f be       	out	0x3f, r0	; 63
     3ac:	cd bf       	out	0x3d, r28	; 61
     3ae:	9c 83       	std	Y+4, r25	; 0x04
     3b0:	8b 83       	std	Y+3, r24	; 0x03
     3b2:	6d 83       	std	Y+5, r22	; 0x05
     3b4:	5f 83       	std	Y+7, r21	; 0x07
     3b6:	4e 83       	std	Y+6, r20	; 0x06
	EnumSOSError_type API_State = OK_T;
     3b8:	19 82       	std	Y+1, r1	; 0x01
	uint8 index;
	/* Protect from NUll pointer */ 
	if ( NULL != PtrFunc)
     3ba:	8b 81       	ldd	r24, Y+3	; 0x03
     3bc:	9c 81       	ldd	r25, Y+4	; 0x04
     3be:	89 2b       	or	r24, r25
     3c0:	09 f4       	brne	.+2      	; 0x3c4 <Sos_Create_Task+0x2a>
     3c2:	75 c0       	rjmp	.+234    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
	{   /* Loop Through the Array of Tasks */ 
		for (index = INITIAL_ZERO ; index < SOS_MAX_NUMBER_OF_TASKS ; index++)
     3c4:	1a 82       	std	Y+2, r1	; 0x02
     3c6:	6e c0       	rjmp	.+220    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
		{
			if (StrArrOfTasks[index].PtrTask == NULL)
     3c8:	8a 81       	ldd	r24, Y+2	; 0x02
     3ca:	28 2f       	mov	r18, r24
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	c9 01       	movw	r24, r18
     3d0:	88 0f       	add	r24, r24
     3d2:	99 1f       	adc	r25, r25
     3d4:	82 0f       	add	r24, r18
     3d6:	93 1f       	adc	r25, r19
     3d8:	88 0f       	add	r24, r24
     3da:	99 1f       	adc	r25, r25
     3dc:	80 59       	subi	r24, 0x90	; 144
     3de:	9f 4f       	sbci	r25, 0xFF	; 255
     3e0:	fc 01       	movw	r30, r24
     3e2:	80 81       	ld	r24, Z
     3e4:	91 81       	ldd	r25, Z+1	; 0x01
     3e6:	89 2b       	or	r24, r25
     3e8:	09 f0       	breq	.+2      	; 0x3ec <Sos_Create_Task+0x52>
     3ea:	57 c0       	rjmp	.+174    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
			{
				StrArrOfTasks[index].PtrTask = PtrFunc;
     3ec:	8a 81       	ldd	r24, Y+2	; 0x02
     3ee:	28 2f       	mov	r18, r24
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	c9 01       	movw	r24, r18
     3f4:	88 0f       	add	r24, r24
     3f6:	99 1f       	adc	r25, r25
     3f8:	82 0f       	add	r24, r18
     3fa:	93 1f       	adc	r25, r19
     3fc:	88 0f       	add	r24, r24
     3fe:	99 1f       	adc	r25, r25
     400:	80 59       	subi	r24, 0x90	; 144
     402:	9f 4f       	sbci	r25, 0xFF	; 255
     404:	2b 81       	ldd	r18, Y+3	; 0x03
     406:	3c 81       	ldd	r19, Y+4	; 0x04
     408:	fc 01       	movw	r30, r24
     40a:	31 83       	std	Z+1, r19	; 0x01
     40c:	20 83       	st	Z, r18
				StrArrOfTasks[index].Periodicity = periodicity;
     40e:	8a 81       	ldd	r24, Y+2	; 0x02
     410:	28 2f       	mov	r18, r24
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	c9 01       	movw	r24, r18
     416:	88 0f       	add	r24, r24
     418:	99 1f       	adc	r25, r25
     41a:	82 0f       	add	r24, r18
     41c:	93 1f       	adc	r25, r19
     41e:	88 0f       	add	r24, r24
     420:	99 1f       	adc	r25, r25
     422:	8d 58       	subi	r24, 0x8D	; 141
     424:	9f 4f       	sbci	r25, 0xFF	; 255
     426:	2e 81       	ldd	r18, Y+6	; 0x06
     428:	3f 81       	ldd	r19, Y+7	; 0x07
     42a:	fc 01       	movw	r30, r24
     42c:	31 83       	std	Z+1, r19	; 0x01
     42e:	20 83       	st	Z, r18
				StrArrOfTasks[index].TaskState = TaskReady;
     430:	8a 81       	ldd	r24, Y+2	; 0x02
     432:	28 2f       	mov	r18, r24
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	c9 01       	movw	r24, r18
     438:	88 0f       	add	r24, r24
     43a:	99 1f       	adc	r25, r25
     43c:	82 0f       	add	r24, r18
     43e:	93 1f       	adc	r25, r19
     440:	88 0f       	add	r24, r24
     442:	99 1f       	adc	r25, r25
     444:	8b 58       	subi	r24, 0x8B	; 139
     446:	9f 4f       	sbci	r25, 0xFF	; 255
     448:	21 e0       	ldi	r18, 0x01	; 1
     44a:	fc 01       	movw	r30, r24
     44c:	20 83       	st	Z, r18
				if ( priority <= SOS_MAX_PRIORITY)
     44e:	8d 81       	ldd	r24, Y+5	; 0x05
     450:	87 30       	cpi	r24, 0x07	; 7
     452:	80 f4       	brcc	.+32     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
				{
					StrArrOfTasks[index].Priority = priority;
     454:	8a 81       	ldd	r24, Y+2	; 0x02
     456:	28 2f       	mov	r18, r24
     458:	30 e0       	ldi	r19, 0x00	; 0
     45a:	c9 01       	movw	r24, r18
     45c:	88 0f       	add	r24, r24
     45e:	99 1f       	adc	r25, r25
     460:	82 0f       	add	r24, r18
     462:	93 1f       	adc	r25, r19
     464:	88 0f       	add	r24, r24
     466:	99 1f       	adc	r25, r25
     468:	8e 58       	subi	r24, 0x8E	; 142
     46a:	9f 4f       	sbci	r25, 0xFF	; 255
     46c:	2d 81       	ldd	r18, Y+5	; 0x05
     46e:	fc 01       	movw	r30, r24
     470:	20 83       	st	Z, r18
     472:	11 c0       	rjmp	.+34     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
				}
				else
				{
					/* If the entered priority is larger than the maximum one >> Set it to the Max */
					StrArrOfTasks[index].Priority = SOS_MAX_PRIORITY;
     474:	8a 81       	ldd	r24, Y+2	; 0x02
     476:	28 2f       	mov	r18, r24
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	c9 01       	movw	r24, r18
     47c:	88 0f       	add	r24, r24
     47e:	99 1f       	adc	r25, r25
     480:	82 0f       	add	r24, r18
     482:	93 1f       	adc	r25, r19
     484:	88 0f       	add	r24, r24
     486:	99 1f       	adc	r25, r25
     488:	8e 58       	subi	r24, 0x8E	; 142
     48a:	9f 4f       	sbci	r25, 0xFF	; 255
     48c:	26 e0       	ldi	r18, 0x06	; 6
     48e:	fc 01       	movw	r30, r24
     490:	20 83       	st	Z, r18
					API_State = ERROR_INVALID_PRIORITY;
     492:	84 e0       	ldi	r24, 0x04	; 4
     494:	89 83       	std	Y+1, r24	; 0x01
				}
				API_State = OK_T;
     496:	19 82       	std	Y+1, r1	; 0x01
				break;
     498:	0c c0       	rjmp	.+24     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
			}
			else
			{
				API_State = ERROR_MAX_TASKS_NUMBER_REACHED;
     49a:	83 e0       	ldi	r24, 0x03	; 3
     49c:	89 83       	std	Y+1, r24	; 0x01
	EnumSOSError_type API_State = OK_T;
	uint8 index;
	/* Protect from NUll pointer */ 
	if ( NULL != PtrFunc)
	{   /* Loop Through the Array of Tasks */ 
		for (index = INITIAL_ZERO ; index < SOS_MAX_NUMBER_OF_TASKS ; index++)
     49e:	8a 81       	ldd	r24, Y+2	; 0x02
     4a0:	8f 5f       	subi	r24, 0xFF	; 255
     4a2:	8a 83       	std	Y+2, r24	; 0x02
     4a4:	8a 81       	ldd	r24, Y+2	; 0x02
     4a6:	86 30       	cpi	r24, 0x06	; 6
     4a8:	08 f4       	brcc	.+2      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     4aa:	8e cf       	rjmp	.-228    	; 0x3c8 <Sos_Create_Task+0x2e>
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
			}
		}
	}
	else
	{
		API_State = ERROR_NULL_POINTER;
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	89 83       	std	Y+1, r24	; 0x01
	}
	return API_State;
     4b2:	89 81       	ldd	r24, Y+1	; 0x01
}
     4b4:	27 96       	adiw	r28, 0x07	; 7
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	f8 94       	cli
     4ba:	de bf       	out	0x3e, r29	; 62
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	cd bf       	out	0x3d, r28	; 61
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	08 95       	ret

000004c6 <Sos_Run>:
 * Function : Sos_Run
 * Description: this function is to run the System Scheduler (Algorithm)
 * @return void
 */
void Sos_Run(void)
{
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	00 d0       	rcall	.+0      	; 0x4cc <Sos_Run+0x6>
     4cc:	1f 92       	push	r1
     4ce:	cd b7       	in	r28, 0x3d	; 61
     4d0:	de b7       	in	r29, 0x3e	; 62
	sint8 index = INITIAL_ZERO;
     4d2:	19 82       	std	Y+1, r1	; 0x01
	sint8 MaxPriorityIndex = INITIAL_MINUS_ONE;
     4d4:	8f ef       	ldi	r24, 0xFF	; 255
     4d6:	8a 83       	std	Y+2, r24	; 0x02
	sint8 MaxPriority = INITIAL_ZERO;
     4d8:	1b 82       	std	Y+3, r1	; 0x03
	while(TRUE)
	{
		for (index = INITIAL_ZERO; index < SOS_MAX_NUMBER_OF_TASKS; index++)
     4da:	19 82       	std	Y+1, r1	; 0x01
     4dc:	98 c0       	rjmp	.+304    	; 0x60e <Sos_Run+0x148>
		{
				switch( (StrArrOfTasks[index].TaskState) )
     4de:	89 81       	ldd	r24, Y+1	; 0x01
     4e0:	28 2f       	mov	r18, r24
     4e2:	88 0f       	add	r24, r24
     4e4:	33 0b       	sbc	r19, r19
     4e6:	c9 01       	movw	r24, r18
     4e8:	88 0f       	add	r24, r24
     4ea:	99 1f       	adc	r25, r25
     4ec:	82 0f       	add	r24, r18
     4ee:	93 1f       	adc	r25, r19
     4f0:	88 0f       	add	r24, r24
     4f2:	99 1f       	adc	r25, r25
     4f4:	8b 58       	subi	r24, 0x8B	; 139
     4f6:	9f 4f       	sbci	r25, 0xFF	; 255
     4f8:	fc 01       	movw	r30, r24
     4fa:	80 81       	ld	r24, Z
     4fc:	88 2f       	mov	r24, r24
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	81 30       	cpi	r24, 0x01	; 1
     502:	91 05       	cpc	r25, r1
     504:	71 f0       	breq	.+28     	; 0x522 <Sos_Run+0x5c>
     506:	82 30       	cpi	r24, 0x02	; 2
     508:	91 05       	cpc	r25, r1
     50a:	24 f4       	brge	.+8      	; 0x514 <Sos_Run+0x4e>
     50c:	89 2b       	or	r24, r25
     50e:	09 f4       	brne	.+2      	; 0x512 <Sos_Run+0x4c>
     510:	76 c0       	rjmp	.+236    	; 0x5fe <Sos_Run+0x138>
						{
							//Do nothing
						}
						break;
					default:
						break;
     512:	7a c0       	rjmp	.+244    	; 0x608 <Sos_Run+0x142>
	sint8 MaxPriority = INITIAL_ZERO;
	while(TRUE)
	{
		for (index = INITIAL_ZERO; index < SOS_MAX_NUMBER_OF_TASKS; index++)
		{
				switch( (StrArrOfTasks[index].TaskState) )
     514:	82 30       	cpi	r24, 0x02	; 2
     516:	91 05       	cpc	r25, r1
     518:	81 f1       	breq	.+96     	; 0x57a <Sos_Run+0xb4>
     51a:	03 97       	sbiw	r24, 0x03	; 3
     51c:	09 f4       	brne	.+2      	; 0x520 <Sos_Run+0x5a>
     51e:	41 c0       	rjmp	.+130    	; 0x5a2 <Sos_Run+0xdc>
						{
							//Do nothing
						}
						break;
					default:
						break;
     520:	73 c0       	rjmp	.+230    	; 0x608 <Sos_Run+0x142>
				{
					case TaskDormint:
						//Do Nothing
						break;
					case TaskReady:
						if( MaxPriority < StrArrOfTasks[index].Priority )
     522:	8b 81       	ldd	r24, Y+3	; 0x03
     524:	48 2f       	mov	r20, r24
     526:	88 0f       	add	r24, r24
     528:	55 0b       	sbc	r21, r21
     52a:	89 81       	ldd	r24, Y+1	; 0x01
     52c:	28 2f       	mov	r18, r24
     52e:	88 0f       	add	r24, r24
     530:	33 0b       	sbc	r19, r19
     532:	c9 01       	movw	r24, r18
     534:	88 0f       	add	r24, r24
     536:	99 1f       	adc	r25, r25
     538:	82 0f       	add	r24, r18
     53a:	93 1f       	adc	r25, r19
     53c:	88 0f       	add	r24, r24
     53e:	99 1f       	adc	r25, r25
     540:	8e 58       	subi	r24, 0x8E	; 142
     542:	9f 4f       	sbci	r25, 0xFF	; 255
     544:	fc 01       	movw	r30, r24
     546:	80 81       	ld	r24, Z
     548:	88 2f       	mov	r24, r24
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	48 17       	cp	r20, r24
     54e:	59 07       	cpc	r21, r25
     550:	0c f0       	brlt	.+2      	; 0x554 <Sos_Run+0x8e>
     552:	57 c0       	rjmp	.+174    	; 0x602 <Sos_Run+0x13c>
						{
							MaxPriority = StrArrOfTasks[index].Priority;
     554:	89 81       	ldd	r24, Y+1	; 0x01
     556:	28 2f       	mov	r18, r24
     558:	88 0f       	add	r24, r24
     55a:	33 0b       	sbc	r19, r19
     55c:	c9 01       	movw	r24, r18
     55e:	88 0f       	add	r24, r24
     560:	99 1f       	adc	r25, r25
     562:	82 0f       	add	r24, r18
     564:	93 1f       	adc	r25, r19
     566:	88 0f       	add	r24, r24
     568:	99 1f       	adc	r25, r25
     56a:	8e 58       	subi	r24, 0x8E	; 142
     56c:	9f 4f       	sbci	r25, 0xFF	; 255
     56e:	fc 01       	movw	r30, r24
     570:	80 81       	ld	r24, Z
     572:	8b 83       	std	Y+3, r24	; 0x03
							MaxPriorityIndex = index;
     574:	89 81       	ldd	r24, Y+1	; 0x01
     576:	8a 83       	std	Y+2, r24	; 0x02
						}
						else
						{
							//Do Nothing
						}
						break;
     578:	44 c0       	rjmp	.+136    	; 0x602 <Sos_Run+0x13c>
					case TaskRunning:
						StrArrOfTasks[index].TaskState = TaskWaiting;
     57a:	89 81       	ldd	r24, Y+1	; 0x01
     57c:	28 2f       	mov	r18, r24
     57e:	88 0f       	add	r24, r24
     580:	33 0b       	sbc	r19, r19
     582:	c9 01       	movw	r24, r18
     584:	88 0f       	add	r24, r24
     586:	99 1f       	adc	r25, r25
     588:	82 0f       	add	r24, r18
     58a:	93 1f       	adc	r25, r19
     58c:	88 0f       	add	r24, r24
     58e:	99 1f       	adc	r25, r25
     590:	8b 58       	subi	r24, 0x8B	; 139
     592:	9f 4f       	sbci	r25, 0xFF	; 255
     594:	23 e0       	ldi	r18, 0x03	; 3
     596:	fc 01       	movw	r30, r24
     598:	20 83       	st	Z, r18
						index = index-1;
     59a:	89 81       	ldd	r24, Y+1	; 0x01
     59c:	81 50       	subi	r24, 0x01	; 1
     59e:	89 83       	std	Y+1, r24	; 0x01
						break;
     5a0:	33 c0       	rjmp	.+102    	; 0x608 <Sos_Run+0x142>
					case TaskWaiting:
						if( (Systick % StrArrOfTasks[index].Periodicity) == FALSE)
     5a2:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__data_start>
     5a6:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__data_start+0x1>
     5aa:	89 81       	ldd	r24, Y+1	; 0x01
     5ac:	28 2f       	mov	r18, r24
     5ae:	88 0f       	add	r24, r24
     5b0:	33 0b       	sbc	r19, r19
     5b2:	c9 01       	movw	r24, r18
     5b4:	88 0f       	add	r24, r24
     5b6:	99 1f       	adc	r25, r25
     5b8:	82 0f       	add	r24, r18
     5ba:	93 1f       	adc	r25, r19
     5bc:	88 0f       	add	r24, r24
     5be:	99 1f       	adc	r25, r25
     5c0:	8d 58       	subi	r24, 0x8D	; 141
     5c2:	9f 4f       	sbci	r25, 0xFF	; 255
     5c4:	fc 01       	movw	r30, r24
     5c6:	20 81       	ld	r18, Z
     5c8:	31 81       	ldd	r19, Z+1	; 0x01
     5ca:	ca 01       	movw	r24, r20
     5cc:	b9 01       	movw	r22, r18
     5ce:	0e 94 4f 08 	call	0x109e	; 0x109e <__udivmodhi4>
     5d2:	89 2b       	or	r24, r25
     5d4:	c1 f4       	brne	.+48     	; 0x606 <Sos_Run+0x140>
						{
							StrArrOfTasks[index].TaskState = TaskReady;
     5d6:	89 81       	ldd	r24, Y+1	; 0x01
     5d8:	28 2f       	mov	r18, r24
     5da:	88 0f       	add	r24, r24
     5dc:	33 0b       	sbc	r19, r19
     5de:	c9 01       	movw	r24, r18
     5e0:	88 0f       	add	r24, r24
     5e2:	99 1f       	adc	r25, r25
     5e4:	82 0f       	add	r24, r18
     5e6:	93 1f       	adc	r25, r19
     5e8:	88 0f       	add	r24, r24
     5ea:	99 1f       	adc	r25, r25
     5ec:	8b 58       	subi	r24, 0x8B	; 139
     5ee:	9f 4f       	sbci	r25, 0xFF	; 255
     5f0:	21 e0       	ldi	r18, 0x01	; 1
     5f2:	fc 01       	movw	r30, r24
     5f4:	20 83       	st	Z, r18
							index = index-1;
     5f6:	89 81       	ldd	r24, Y+1	; 0x01
     5f8:	81 50       	subi	r24, 0x01	; 1
     5fa:	89 83       	std	Y+1, r24	; 0x01
						}
						else
						{
							//Do nothing
						}
						break;
     5fc:	04 c0       	rjmp	.+8      	; 0x606 <Sos_Run+0x140>
		{
				switch( (StrArrOfTasks[index].TaskState) )
				{
					case TaskDormint:
						//Do Nothing
						break;
     5fe:	00 00       	nop
     600:	03 c0       	rjmp	.+6      	; 0x608 <Sos_Run+0x142>
						}
						else
						{
							//Do Nothing
						}
						break;
     602:	00 00       	nop
     604:	01 c0       	rjmp	.+2      	; 0x608 <Sos_Run+0x142>
						}
						else
						{
							//Do nothing
						}
						break;
     606:	00 00       	nop
	sint8 index = INITIAL_ZERO;
	sint8 MaxPriorityIndex = INITIAL_MINUS_ONE;
	sint8 MaxPriority = INITIAL_ZERO;
	while(TRUE)
	{
		for (index = INITIAL_ZERO; index < SOS_MAX_NUMBER_OF_TASKS; index++)
     608:	89 81       	ldd	r24, Y+1	; 0x01
     60a:	8f 5f       	subi	r24, 0xFF	; 255
     60c:	89 83       	std	Y+1, r24	; 0x01
     60e:	89 81       	ldd	r24, Y+1	; 0x01
     610:	86 30       	cpi	r24, 0x06	; 6
     612:	0c f4       	brge	.+2      	; 0x616 <Sos_Run+0x150>
     614:	64 cf       	rjmp	.-312    	; 0x4de <Sos_Run+0x18>
					default:
						break;
				}
		}
		
		if(MaxPriorityIndex >= INITIAL_ZERO)
     616:	8a 81       	ldd	r24, Y+2	; 0x02
     618:	88 23       	and	r24, r24
     61a:	2c f1       	brlt	.+74     	; 0x666 <Sos_Run+0x1a0>
		{
			StrArrOfTasks[MaxPriorityIndex].PtrTask();
     61c:	8a 81       	ldd	r24, Y+2	; 0x02
     61e:	28 2f       	mov	r18, r24
     620:	88 0f       	add	r24, r24
     622:	33 0b       	sbc	r19, r19
     624:	c9 01       	movw	r24, r18
     626:	88 0f       	add	r24, r24
     628:	99 1f       	adc	r25, r25
     62a:	82 0f       	add	r24, r18
     62c:	93 1f       	adc	r25, r19
     62e:	88 0f       	add	r24, r24
     630:	99 1f       	adc	r25, r25
     632:	80 59       	subi	r24, 0x90	; 144
     634:	9f 4f       	sbci	r25, 0xFF	; 255
     636:	fc 01       	movw	r30, r24
     638:	80 81       	ld	r24, Z
     63a:	91 81       	ldd	r25, Z+1	; 0x01
     63c:	fc 01       	movw	r30, r24
     63e:	09 95       	icall
			StrArrOfTasks[MaxPriorityIndex].TaskState = TaskRunning;		
     640:	8a 81       	ldd	r24, Y+2	; 0x02
     642:	28 2f       	mov	r18, r24
     644:	88 0f       	add	r24, r24
     646:	33 0b       	sbc	r19, r19
     648:	c9 01       	movw	r24, r18
     64a:	88 0f       	add	r24, r24
     64c:	99 1f       	adc	r25, r25
     64e:	82 0f       	add	r24, r18
     650:	93 1f       	adc	r25, r19
     652:	88 0f       	add	r24, r24
     654:	99 1f       	adc	r25, r25
     656:	8b 58       	subi	r24, 0x8B	; 139
     658:	9f 4f       	sbci	r25, 0xFF	; 255
     65a:	22 e0       	ldi	r18, 0x02	; 2
     65c:	fc 01       	movw	r30, r24
     65e:	20 83       	st	Z, r18
			MaxPriorityIndex = INITIAL_MINUS_ONE;
     660:	8f ef       	ldi	r24, 0xFF	; 255
     662:	8a 83       	std	Y+2, r24	; 0x02
			MaxPriority = INITIAL_ZERO;
     664:	1b 82       	std	Y+3, r1	; 0x03
		else
		{
			//Do Nothing
		}
		
		sleep_mode();
     666:	85 e5       	ldi	r24, 0x55	; 85
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	25 e5       	ldi	r18, 0x55	; 85
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	f9 01       	movw	r30, r18
     670:	20 81       	ld	r18, Z
     672:	20 68       	ori	r18, 0x80	; 128
     674:	fc 01       	movw	r30, r24
     676:	20 83       	st	Z, r18
     678:	88 95       	sleep
     67a:	85 e5       	ldi	r24, 0x55	; 85
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	25 e5       	ldi	r18, 0x55	; 85
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	f9 01       	movw	r30, r18
     684:	20 81       	ld	r18, Z
     686:	2f 77       	andi	r18, 0x7F	; 127
     688:	fc 01       	movw	r30, r24
     68a:	20 83       	st	Z, r18
	}
     68c:	26 cf       	rjmp	.-436    	; 0x4da <Sos_Run+0x14>

0000068e <Gpio_PinDirection>:
 * @param pins : the pin Number {BIT0,BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7}
 * @param direction : The Direction of the PIN >> {SET_IN , SET_OUT}
 * Return : void
 */
void Gpio_PinDirection(uint8 port, uint8 pins, uint8 direction)
{
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	00 d0       	rcall	.+0      	; 0x694 <Gpio_PinDirection+0x6>
     694:	1f 92       	push	r1
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
     69a:	89 83       	std	Y+1, r24	; 0x01
     69c:	6a 83       	std	Y+2, r22	; 0x02
     69e:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
     6a0:	89 81       	ldd	r24, Y+1	; 0x01
     6a2:	88 2f       	mov	r24, r24
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	81 30       	cpi	r24, 0x01	; 1
     6a8:	91 05       	cpc	r25, r1
     6aa:	81 f1       	breq	.+96     	; 0x70c <Gpio_PinDirection+0x7e>
     6ac:	82 30       	cpi	r24, 0x02	; 2
     6ae:	91 05       	cpc	r25, r1
     6b0:	1c f4       	brge	.+6      	; 0x6b8 <Gpio_PinDirection+0x2a>
     6b2:	89 2b       	or	r24, r25
     6b4:	49 f0       	breq	.+18     	; 0x6c8 <Gpio_PinDirection+0x3a>
				break;
			}
		}
		break;
	}
}
     6b6:	90 c0       	rjmp	.+288    	; 0x7d8 <Gpio_PinDirection+0x14a>
 * @param direction : The Direction of the PIN >> {SET_IN , SET_OUT}
 * Return : void
 */
void Gpio_PinDirection(uint8 port, uint8 pins, uint8 direction)
{
	switch(port)
     6b8:	82 30       	cpi	r24, 0x02	; 2
     6ba:	91 05       	cpc	r25, r1
     6bc:	09 f4       	brne	.+2      	; 0x6c0 <Gpio_PinDirection+0x32>
     6be:	48 c0       	rjmp	.+144    	; 0x750 <Gpio_PinDirection+0xc2>
     6c0:	03 97       	sbiw	r24, 0x03	; 3
     6c2:	09 f4       	brne	.+2      	; 0x6c6 <Gpio_PinDirection+0x38>
     6c4:	67 c0       	rjmp	.+206    	; 0x794 <Gpio_PinDirection+0x106>
				break;
			}
		}
		break;
	}
}
     6c6:	88 c0       	rjmp	.+272    	; 0x7d8 <Gpio_PinDirection+0x14a>
{
	switch(port)
	{
		case MYPORTA :
		{
		switch(direction)
     6c8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ca:	88 2f       	mov	r24, r24
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	00 97       	sbiw	r24, 0x00	; 0
     6d0:	21 f0       	breq	.+8      	; 0x6da <Gpio_PinDirection+0x4c>
     6d2:	8f 3f       	cpi	r24, 0xFF	; 255
     6d4:	91 05       	cpc	r25, r1
     6d6:	71 f0       	breq	.+28     	; 0x6f4 <Gpio_PinDirection+0x66>
		case SET_OUT : 
		DDR_A |= (pins);
		break;
		}
		}
		break;
     6d8:	7f c0       	rjmp	.+254    	; 0x7d8 <Gpio_PinDirection+0x14a>
		case MYPORTA :
		{
		switch(direction)
		{
		case SET_IN : 
		DDR_A &= ~(pins);
     6da:	8a e3       	ldi	r24, 0x3A	; 58
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	2a e3       	ldi	r18, 0x3A	; 58
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	f9 01       	movw	r30, r18
     6e4:	20 81       	ld	r18, Z
     6e6:	32 2f       	mov	r19, r18
     6e8:	2a 81       	ldd	r18, Y+2	; 0x02
     6ea:	20 95       	com	r18
     6ec:	23 23       	and	r18, r19
     6ee:	fc 01       	movw	r30, r24
     6f0:	20 83       	st	Z, r18
		break;
     6f2:	0b c0       	rjmp	.+22     	; 0x70a <Gpio_PinDirection+0x7c>
		case SET_OUT : 
		DDR_A |= (pins);
     6f4:	8a e3       	ldi	r24, 0x3A	; 58
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	2a e3       	ldi	r18, 0x3A	; 58
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	f9 01       	movw	r30, r18
     6fe:	30 81       	ld	r19, Z
     700:	2a 81       	ldd	r18, Y+2	; 0x02
     702:	23 2b       	or	r18, r19
     704:	fc 01       	movw	r30, r24
     706:	20 83       	st	Z, r18
		break;
     708:	00 00       	nop
		}
		}
		break;
     70a:	66 c0       	rjmp	.+204    	; 0x7d8 <Gpio_PinDirection+0x14a>
		
		case MYPORTB :
		{
		switch(direction)
     70c:	8b 81       	ldd	r24, Y+3	; 0x03
     70e:	88 2f       	mov	r24, r24
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	00 97       	sbiw	r24, 0x00	; 0
     714:	21 f0       	breq	.+8      	; 0x71e <Gpio_PinDirection+0x90>
     716:	8f 3f       	cpi	r24, 0xFF	; 255
     718:	91 05       	cpc	r25, r1
     71a:	71 f0       	breq	.+28     	; 0x738 <Gpio_PinDirection+0xaa>
		case SET_OUT :
			DDR_B |= (pins);
			break;
		}
		}
		break;
     71c:	5d c0       	rjmp	.+186    	; 0x7d8 <Gpio_PinDirection+0x14a>
		case MYPORTB :
		{
		switch(direction)
		{
		case SET_IN :
			DDR_B &= ~(pins);
     71e:	87 e3       	ldi	r24, 0x37	; 55
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	27 e3       	ldi	r18, 0x37	; 55
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	f9 01       	movw	r30, r18
     728:	20 81       	ld	r18, Z
     72a:	32 2f       	mov	r19, r18
     72c:	2a 81       	ldd	r18, Y+2	; 0x02
     72e:	20 95       	com	r18
     730:	23 23       	and	r18, r19
     732:	fc 01       	movw	r30, r24
     734:	20 83       	st	Z, r18
			break;
     736:	0b c0       	rjmp	.+22     	; 0x74e <Gpio_PinDirection+0xc0>
		case SET_OUT :
			DDR_B |= (pins);
     738:	87 e3       	ldi	r24, 0x37	; 55
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	27 e3       	ldi	r18, 0x37	; 55
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	f9 01       	movw	r30, r18
     742:	30 81       	ld	r19, Z
     744:	2a 81       	ldd	r18, Y+2	; 0x02
     746:	23 2b       	or	r18, r19
     748:	fc 01       	movw	r30, r24
     74a:	20 83       	st	Z, r18
			break;
     74c:	00 00       	nop
		}
		}
		break;
     74e:	44 c0       	rjmp	.+136    	; 0x7d8 <Gpio_PinDirection+0x14a>
		case MYPORTC :
		{
			switch(direction)
     750:	8b 81       	ldd	r24, Y+3	; 0x03
     752:	88 2f       	mov	r24, r24
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	00 97       	sbiw	r24, 0x00	; 0
     758:	21 f0       	breq	.+8      	; 0x762 <Gpio_PinDirection+0xd4>
     75a:	8f 3f       	cpi	r24, 0xFF	; 255
     75c:	91 05       	cpc	r25, r1
     75e:	71 f0       	breq	.+28     	; 0x77c <Gpio_PinDirection+0xee>
				case SET_OUT :
				DDR_C |= (pins);
				break;
			}
		}
		break;
     760:	3b c0       	rjmp	.+118    	; 0x7d8 <Gpio_PinDirection+0x14a>
		case MYPORTC :
		{
			switch(direction)
			{
				case SET_IN :
				DDR_C &= ~(pins);
     762:	84 e3       	ldi	r24, 0x34	; 52
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	24 e3       	ldi	r18, 0x34	; 52
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	f9 01       	movw	r30, r18
     76c:	20 81       	ld	r18, Z
     76e:	32 2f       	mov	r19, r18
     770:	2a 81       	ldd	r18, Y+2	; 0x02
     772:	20 95       	com	r18
     774:	23 23       	and	r18, r19
     776:	fc 01       	movw	r30, r24
     778:	20 83       	st	Z, r18
				break;
     77a:	0b c0       	rjmp	.+22     	; 0x792 <Gpio_PinDirection+0x104>
				case SET_OUT :
				DDR_C |= (pins);
     77c:	84 e3       	ldi	r24, 0x34	; 52
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	24 e3       	ldi	r18, 0x34	; 52
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	f9 01       	movw	r30, r18
     786:	30 81       	ld	r19, Z
     788:	2a 81       	ldd	r18, Y+2	; 0x02
     78a:	23 2b       	or	r18, r19
     78c:	fc 01       	movw	r30, r24
     78e:	20 83       	st	Z, r18
				break;
     790:	00 00       	nop
			}
		}
		break;
     792:	22 c0       	rjmp	.+68     	; 0x7d8 <Gpio_PinDirection+0x14a>
		case MYPORTD :
		{
			switch(direction)
     794:	8b 81       	ldd	r24, Y+3	; 0x03
     796:	88 2f       	mov	r24, r24
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	00 97       	sbiw	r24, 0x00	; 0
     79c:	21 f0       	breq	.+8      	; 0x7a6 <Gpio_PinDirection+0x118>
     79e:	8f 3f       	cpi	r24, 0xFF	; 255
     7a0:	91 05       	cpc	r25, r1
     7a2:	71 f0       	breq	.+28     	; 0x7c0 <Gpio_PinDirection+0x132>
				case SET_OUT :
				DDR_D |= (pins);
				break;
			}
		}
		break;
     7a4:	18 c0       	rjmp	.+48     	; 0x7d6 <Gpio_PinDirection+0x148>
		case MYPORTD :
		{
			switch(direction)
			{
				case SET_IN :
				DDR_D &= ~(pins);
     7a6:	81 e3       	ldi	r24, 0x31	; 49
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	21 e3       	ldi	r18, 0x31	; 49
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	f9 01       	movw	r30, r18
     7b0:	20 81       	ld	r18, Z
     7b2:	32 2f       	mov	r19, r18
     7b4:	2a 81       	ldd	r18, Y+2	; 0x02
     7b6:	20 95       	com	r18
     7b8:	23 23       	and	r18, r19
     7ba:	fc 01       	movw	r30, r24
     7bc:	20 83       	st	Z, r18
				break;
     7be:	0b c0       	rjmp	.+22     	; 0x7d6 <Gpio_PinDirection+0x148>
				case SET_OUT :
				DDR_D |= (pins);
     7c0:	81 e3       	ldi	r24, 0x31	; 49
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	21 e3       	ldi	r18, 0x31	; 49
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	f9 01       	movw	r30, r18
     7ca:	30 81       	ld	r19, Z
     7cc:	2a 81       	ldd	r18, Y+2	; 0x02
     7ce:	23 2b       	or	r18, r19
     7d0:	fc 01       	movw	r30, r24
     7d2:	20 83       	st	Z, r18
				break;
     7d4:	00 00       	nop
			}
		}
		break;
     7d6:	00 00       	nop
	}
}
     7d8:	00 00       	nop
     7da:	0f 90       	pop	r0
     7dc:	0f 90       	pop	r0
     7de:	0f 90       	pop	r0
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	08 95       	ret

000007e6 <Gpio_PinWrite>:
 * @param pins : the pin Number {BIT0,BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7}
 * @param value : The value of the PIN >> {HIGH , LOW}
 * Return : void
 */
void Gpio_PinWrite(uint8 port, uint8 pins, uint8 value)
{
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	00 d0       	rcall	.+0      	; 0x7ec <Gpio_PinWrite+0x6>
     7ec:	1f 92       	push	r1
     7ee:	cd b7       	in	r28, 0x3d	; 61
     7f0:	de b7       	in	r29, 0x3e	; 62
     7f2:	89 83       	std	Y+1, r24	; 0x01
     7f4:	6a 83       	std	Y+2, r22	; 0x02
     7f6:	4b 83       	std	Y+3, r20	; 0x03
	switch(value)
     7f8:	8b 81       	ldd	r24, Y+3	; 0x03
     7fa:	88 2f       	mov	r24, r24
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	00 97       	sbiw	r24, 0x00	; 0
     800:	09 f4       	brne	.+2      	; 0x804 <Gpio_PinWrite+0x1e>
     802:	42 c0       	rjmp	.+132    	; 0x888 <__stack+0x29>
     804:	01 97       	sbiw	r24, 0x01	; 1
     806:	09 f0       	breq	.+2      	; 0x80a <Gpio_PinWrite+0x24>
			PORT_D &= ~(pins);
			break;
		}
		break;	
	}
}
     808:	86 c0       	rjmp	.+268    	; 0x916 <__stack+0xb7>
void Gpio_PinWrite(uint8 port, uint8 pins, uint8 value)
{
	switch(value)
	{
		case HIGH:
			switch(port)
     80a:	89 81       	ldd	r24, Y+1	; 0x01
     80c:	88 2f       	mov	r24, r24
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	81 30       	cpi	r24, 0x01	; 1
     812:	91 05       	cpc	r25, r1
     814:	b9 f0       	breq	.+46     	; 0x844 <Gpio_PinWrite+0x5e>
     816:	82 30       	cpi	r24, 0x02	; 2
     818:	91 05       	cpc	r25, r1
     81a:	1c f4       	brge	.+6      	; 0x822 <Gpio_PinWrite+0x3c>
     81c:	89 2b       	or	r24, r25
     81e:	39 f0       	breq	.+14     	; 0x82e <Gpio_PinWrite+0x48>
						break;
					case MYPORTD :
						PORT_D |= (pins);
						break;
		}
		break;
     820:	7a c0       	rjmp	.+244    	; 0x916 <__stack+0xb7>
void Gpio_PinWrite(uint8 port, uint8 pins, uint8 value)
{
	switch(value)
	{
		case HIGH:
			switch(port)
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	91 05       	cpc	r25, r1
     826:	c9 f0       	breq	.+50     	; 0x85a <Gpio_PinWrite+0x74>
     828:	03 97       	sbiw	r24, 0x03	; 3
     82a:	11 f1       	breq	.+68     	; 0x870 <__stack+0x11>
						break;
					case MYPORTD :
						PORT_D |= (pins);
						break;
		}
		break;
     82c:	74 c0       	rjmp	.+232    	; 0x916 <__stack+0xb7>
	{
		case HIGH:
			switch(port)
			{
					case MYPORTA :
						PORT_A |= (pins);
     82e:	8b e3       	ldi	r24, 0x3B	; 59
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	2b e3       	ldi	r18, 0x3B	; 59
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	f9 01       	movw	r30, r18
     838:	30 81       	ld	r19, Z
     83a:	2a 81       	ldd	r18, Y+2	; 0x02
     83c:	23 2b       	or	r18, r19
     83e:	fc 01       	movw	r30, r24
     840:	20 83       	st	Z, r18
						break;
     842:	21 c0       	rjmp	.+66     	; 0x886 <__stack+0x27>
					case MYPORTB :
						PORT_B |= (pins);
     844:	88 e3       	ldi	r24, 0x38	; 56
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	28 e3       	ldi	r18, 0x38	; 56
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	f9 01       	movw	r30, r18
     84e:	30 81       	ld	r19, Z
     850:	2a 81       	ldd	r18, Y+2	; 0x02
     852:	23 2b       	or	r18, r19
     854:	fc 01       	movw	r30, r24
     856:	20 83       	st	Z, r18
						break;
     858:	16 c0       	rjmp	.+44     	; 0x886 <__stack+0x27>
					case MYPORTC :
						PORT_C |= (pins);
     85a:	85 e3       	ldi	r24, 0x35	; 53
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	25 e3       	ldi	r18, 0x35	; 53
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	f9 01       	movw	r30, r18
     864:	30 81       	ld	r19, Z
     866:	2a 81       	ldd	r18, Y+2	; 0x02
     868:	23 2b       	or	r18, r19
     86a:	fc 01       	movw	r30, r24
     86c:	20 83       	st	Z, r18
						break;
     86e:	0b c0       	rjmp	.+22     	; 0x886 <__stack+0x27>
					case MYPORTD :
						PORT_D |= (pins);
     870:	82 e3       	ldi	r24, 0x32	; 50
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	22 e3       	ldi	r18, 0x32	; 50
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	f9 01       	movw	r30, r18
     87a:	30 81       	ld	r19, Z
     87c:	2a 81       	ldd	r18, Y+2	; 0x02
     87e:	23 2b       	or	r18, r19
     880:	fc 01       	movw	r30, r24
     882:	20 83       	st	Z, r18
						break;
     884:	00 00       	nop
		}
		break;
     886:	47 c0       	rjmp	.+142    	; 0x916 <__stack+0xb7>
		
		case LOW : 
		switch(port)
     888:	89 81       	ldd	r24, Y+1	; 0x01
     88a:	88 2f       	mov	r24, r24
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	81 30       	cpi	r24, 0x01	; 1
     890:	91 05       	cpc	r25, r1
     892:	c9 f0       	breq	.+50     	; 0x8c6 <__stack+0x67>
     894:	82 30       	cpi	r24, 0x02	; 2
     896:	91 05       	cpc	r25, r1
     898:	1c f4       	brge	.+6      	; 0x8a0 <__stack+0x41>
     89a:	89 2b       	or	r24, r25
     89c:	39 f0       	breq	.+14     	; 0x8ac <__stack+0x4d>
			break;
			case MYPORTD :
			PORT_D &= ~(pins);
			break;
		}
		break;	
     89e:	3a c0       	rjmp	.+116    	; 0x914 <__stack+0xb5>
						break;
		}
		break;
		
		case LOW : 
		switch(port)
     8a0:	82 30       	cpi	r24, 0x02	; 2
     8a2:	91 05       	cpc	r25, r1
     8a4:	e9 f0       	breq	.+58     	; 0x8e0 <__stack+0x81>
     8a6:	03 97       	sbiw	r24, 0x03	; 3
     8a8:	41 f1       	breq	.+80     	; 0x8fa <__stack+0x9b>
			break;
			case MYPORTD :
			PORT_D &= ~(pins);
			break;
		}
		break;	
     8aa:	34 c0       	rjmp	.+104    	; 0x914 <__stack+0xb5>
		
		case LOW : 
		switch(port)
		{
			case MYPORTA :
			PORT_A &= ~(pins);
     8ac:	8b e3       	ldi	r24, 0x3B	; 59
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	2b e3       	ldi	r18, 0x3B	; 59
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	f9 01       	movw	r30, r18
     8b6:	20 81       	ld	r18, Z
     8b8:	32 2f       	mov	r19, r18
     8ba:	2a 81       	ldd	r18, Y+2	; 0x02
     8bc:	20 95       	com	r18
     8be:	23 23       	and	r18, r19
     8c0:	fc 01       	movw	r30, r24
     8c2:	20 83       	st	Z, r18
			break;
     8c4:	27 c0       	rjmp	.+78     	; 0x914 <__stack+0xb5>
			case MYPORTB :
			PORT_B &= ~(pins);
     8c6:	88 e3       	ldi	r24, 0x38	; 56
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	28 e3       	ldi	r18, 0x38	; 56
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	f9 01       	movw	r30, r18
     8d0:	20 81       	ld	r18, Z
     8d2:	32 2f       	mov	r19, r18
     8d4:	2a 81       	ldd	r18, Y+2	; 0x02
     8d6:	20 95       	com	r18
     8d8:	23 23       	and	r18, r19
     8da:	fc 01       	movw	r30, r24
     8dc:	20 83       	st	Z, r18
			break;
     8de:	1a c0       	rjmp	.+52     	; 0x914 <__stack+0xb5>
			case MYPORTC :
			PORT_C &= ~(pins);
     8e0:	85 e3       	ldi	r24, 0x35	; 53
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	25 e3       	ldi	r18, 0x35	; 53
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	f9 01       	movw	r30, r18
     8ea:	20 81       	ld	r18, Z
     8ec:	32 2f       	mov	r19, r18
     8ee:	2a 81       	ldd	r18, Y+2	; 0x02
     8f0:	20 95       	com	r18
     8f2:	23 23       	and	r18, r19
     8f4:	fc 01       	movw	r30, r24
     8f6:	20 83       	st	Z, r18
			break;
     8f8:	0d c0       	rjmp	.+26     	; 0x914 <__stack+0xb5>
			case MYPORTD :
			PORT_D &= ~(pins);
     8fa:	82 e3       	ldi	r24, 0x32	; 50
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	22 e3       	ldi	r18, 0x32	; 50
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	f9 01       	movw	r30, r18
     904:	20 81       	ld	r18, Z
     906:	32 2f       	mov	r19, r18
     908:	2a 81       	ldd	r18, Y+2	; 0x02
     90a:	20 95       	com	r18
     90c:	23 23       	and	r18, r19
     90e:	fc 01       	movw	r30, r24
     910:	20 83       	st	Z, r18
			break;
     912:	00 00       	nop
		}
		break;	
     914:	00 00       	nop
	}
}
     916:	00 00       	nop
     918:	0f 90       	pop	r0
     91a:	0f 90       	pop	r0
     91c:	0f 90       	pop	r0
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	08 95       	ret

00000924 <Gpio_PinToggle>:
 * @param port : the port that includes the pin {MYPORTA,MYPORTB,MYPORTC,MYPORTD}
 * @param pins : the pin Number {BIT0,BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7}
 * Return : void
 */
void Gpio_PinToggle(uint8 port, uint8 pins)
{
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
     928:	00 d0       	rcall	.+0      	; 0x92a <Gpio_PinToggle+0x6>
     92a:	cd b7       	in	r28, 0x3d	; 61
     92c:	de b7       	in	r29, 0x3e	; 62
     92e:	89 83       	std	Y+1, r24	; 0x01
     930:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
     932:	89 81       	ldd	r24, Y+1	; 0x01
     934:	88 2f       	mov	r24, r24
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	81 30       	cpi	r24, 0x01	; 1
     93a:	91 05       	cpc	r25, r1
     93c:	b9 f0       	breq	.+46     	; 0x96c <Gpio_PinToggle+0x48>
     93e:	82 30       	cpi	r24, 0x02	; 2
     940:	91 05       	cpc	r25, r1
     942:	1c f4       	brge	.+6      	; 0x94a <Gpio_PinToggle+0x26>
     944:	89 2b       	or	r24, r25
     946:	39 f0       	breq	.+14     	; 0x956 <Gpio_PinToggle+0x32>
		break;
		case MYPORTD :
		PORT_D ^= (pins);
		break;
	}
}
     948:	32 c0       	rjmp	.+100    	; 0x9ae <Gpio_PinToggle+0x8a>
 * @param pins : the pin Number {BIT0,BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7}
 * Return : void
 */
void Gpio_PinToggle(uint8 port, uint8 pins)
{
	switch(port)
     94a:	82 30       	cpi	r24, 0x02	; 2
     94c:	91 05       	cpc	r25, r1
     94e:	c9 f0       	breq	.+50     	; 0x982 <Gpio_PinToggle+0x5e>
     950:	03 97       	sbiw	r24, 0x03	; 3
     952:	11 f1       	breq	.+68     	; 0x998 <Gpio_PinToggle+0x74>
		break;
		case MYPORTD :
		PORT_D ^= (pins);
		break;
	}
}
     954:	2c c0       	rjmp	.+88     	; 0x9ae <Gpio_PinToggle+0x8a>
void Gpio_PinToggle(uint8 port, uint8 pins)
{
	switch(port)
	{
		case MYPORTA :
		PORT_A ^= (pins);
     956:	8b e3       	ldi	r24, 0x3B	; 59
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	2b e3       	ldi	r18, 0x3B	; 59
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	f9 01       	movw	r30, r18
     960:	30 81       	ld	r19, Z
     962:	2a 81       	ldd	r18, Y+2	; 0x02
     964:	23 27       	eor	r18, r19
     966:	fc 01       	movw	r30, r24
     968:	20 83       	st	Z, r18
		break;
     96a:	21 c0       	rjmp	.+66     	; 0x9ae <Gpio_PinToggle+0x8a>
		case MYPORTB :
		PORT_B ^= (pins);
     96c:	88 e3       	ldi	r24, 0x38	; 56
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	28 e3       	ldi	r18, 0x38	; 56
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	f9 01       	movw	r30, r18
     976:	30 81       	ld	r19, Z
     978:	2a 81       	ldd	r18, Y+2	; 0x02
     97a:	23 27       	eor	r18, r19
     97c:	fc 01       	movw	r30, r24
     97e:	20 83       	st	Z, r18
		break;
     980:	16 c0       	rjmp	.+44     	; 0x9ae <Gpio_PinToggle+0x8a>
		case MYPORTC :
		PORT_C ^= (pins);
     982:	85 e3       	ldi	r24, 0x35	; 53
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	25 e3       	ldi	r18, 0x35	; 53
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	f9 01       	movw	r30, r18
     98c:	30 81       	ld	r19, Z
     98e:	2a 81       	ldd	r18, Y+2	; 0x02
     990:	23 27       	eor	r18, r19
     992:	fc 01       	movw	r30, r24
     994:	20 83       	st	Z, r18
		break;
     996:	0b c0       	rjmp	.+22     	; 0x9ae <Gpio_PinToggle+0x8a>
		case MYPORTD :
		PORT_D ^= (pins);
     998:	82 e3       	ldi	r24, 0x32	; 50
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	22 e3       	ldi	r18, 0x32	; 50
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	f9 01       	movw	r30, r18
     9a2:	30 81       	ld	r19, Z
     9a4:	2a 81       	ldd	r18, Y+2	; 0x02
     9a6:	23 27       	eor	r18, r19
     9a8:	fc 01       	movw	r30, r24
     9aa:	20 83       	st	Z, r18
		break;
     9ac:	00 00       	nop
	}
}
     9ae:	00 00       	nop
     9b0:	0f 90       	pop	r0
     9b2:	0f 90       	pop	r0
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	08 95       	ret

000009ba <Interrupts_On>:
 * Description : This function is used to turn On the global interrupt mask
 * Return : the function Returns nothing
 */

void Interrupts_On(void)
{     
     9ba:	cf 93       	push	r28
     9bc:	df 93       	push	r29
     9be:	cd b7       	in	r28, 0x3d	; 61
     9c0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GIE);
     9c2:	8f e5       	ldi	r24, 0x5F	; 95
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	2f e5       	ldi	r18, 0x5F	; 95
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	f9 01       	movw	r30, r18
     9cc:	20 81       	ld	r18, Z
     9ce:	20 68       	ori	r18, 0x80	; 128
     9d0:	fc 01       	movw	r30, r24
     9d2:	20 83       	st	Z, r18
}
     9d4:	00 00       	nop
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	08 95       	ret

000009dc <Timers_Init>:
	{
		Gpio_PinWrite(SWPWM_2_PORT,SWPWM_2_PIN,TRUE);
		Timers_timer2_Delay_ns(time_On_ns);
		Gpio_PinWrite(SWPWM_2_PORT,SWPWM_2_PIN,FALSE);
		Timers_timer2_Delay_ns(time_Off_ns);
	}
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	00 d0       	rcall	.+0      	; 0x9e2 <Timers_Init+0x6>
     9e2:	1f 92       	push	r1
     9e4:	cd b7       	in	r28, 0x3d	; 61
     9e6:	de b7       	in	r29, 0x3e	; 62
     9e8:	9b 83       	std	Y+3, r25	; 0x03
     9ea:	8a 83       	std	Y+2, r24	; 0x02
     9ec:	19 82       	std	Y+1, r1	; 0x01
     9ee:	8a 81       	ldd	r24, Y+2	; 0x02
     9f0:	9b 81       	ldd	r25, Y+3	; 0x03
     9f2:	fc 01       	movw	r30, r24
     9f4:	87 81       	ldd	r24, Z+7	; 0x07
     9f6:	90 85       	ldd	r25, Z+8	; 0x08
     9f8:	a1 85       	ldd	r26, Z+9	; 0x09
     9fa:	b2 85       	ldd	r27, Z+10	; 0x0a
     9fc:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <Gv_F_CPU>
     a00:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <Gv_F_CPU+0x1>
     a04:	a0 93 96 00 	sts	0x0096, r26	; 0x800096 <Gv_F_CPU+0x2>
     a08:	b0 93 97 00 	sts	0x0097, r27	; 0x800097 <Gv_F_CPU+0x3>
     a0c:	8a 81       	ldd	r24, Y+2	; 0x02
     a0e:	9b 81       	ldd	r25, Y+3	; 0x03
     a10:	fc 01       	movw	r30, r24
     a12:	80 81       	ld	r24, Z
     a14:	88 2f       	mov	r24, r24
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	81 30       	cpi	r24, 0x01	; 1
     a1a:	91 05       	cpc	r25, r1
     a1c:	09 f4       	brne	.+2      	; 0xa20 <Timers_Init+0x44>
     a1e:	64 c0       	rjmp	.+200    	; 0xae8 <Timers_Init+0x10c>
     a20:	82 30       	cpi	r24, 0x02	; 2
     a22:	91 05       	cpc	r25, r1
     a24:	09 f4       	brne	.+2      	; 0xa28 <Timers_Init+0x4c>
     a26:	cc c0       	rjmp	.+408    	; 0xbc0 <Timers_Init+0x1e4>
     a28:	89 2b       	or	r24, r25
     a2a:	09 f0       	breq	.+2      	; 0xa2e <Timers_Init+0x52>
     a2c:	26 c1       	rjmp	.+588    	; 0xc7a <Timers_Init+0x29e>
     a2e:	83 e5       	ldi	r24, 0x53	; 83
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	23 e5       	ldi	r18, 0x53	; 83
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	f9 01       	movw	r30, r18
     a38:	40 81       	ld	r20, Z
     a3a:	2a 81       	ldd	r18, Y+2	; 0x02
     a3c:	3b 81       	ldd	r19, Y+3	; 0x03
     a3e:	f9 01       	movw	r30, r18
     a40:	21 81       	ldd	r18, Z+1	; 0x01
     a42:	24 2b       	or	r18, r20
     a44:	fc 01       	movw	r30, r24
     a46:	20 83       	st	Z, r18
     a48:	89 e5       	ldi	r24, 0x59	; 89
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	29 e5       	ldi	r18, 0x59	; 89
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	f9 01       	movw	r30, r18
     a52:	40 81       	ld	r20, Z
     a54:	2a 81       	ldd	r18, Y+2	; 0x02
     a56:	3b 81       	ldd	r19, Y+3	; 0x03
     a58:	f9 01       	movw	r30, r18
     a5a:	26 81       	ldd	r18, Z+6	; 0x06
     a5c:	24 2b       	or	r18, r20
     a5e:	fc 01       	movw	r30, r24
     a60:	20 83       	st	Z, r18
     a62:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Gv_PrescallerTimer0_Mask>
     a66:	88 2f       	mov	r24, r24
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	82 30       	cpi	r24, 0x02	; 2
     a6c:	91 05       	cpc	r25, r1
     a6e:	e9 f0       	breq	.+58     	; 0xaaa <Timers_Init+0xce>
     a70:	83 30       	cpi	r24, 0x03	; 3
     a72:	91 05       	cpc	r25, r1
     a74:	2c f4       	brge	.+10     	; 0xa80 <Timers_Init+0xa4>
     a76:	00 97       	sbiw	r24, 0x00	; 0
     a78:	61 f0       	breq	.+24     	; 0xa92 <Timers_Init+0xb6>
     a7a:	01 97       	sbiw	r24, 0x01	; 1
     a7c:	79 f0       	breq	.+30     	; 0xa9c <Timers_Init+0xc0>
     a7e:	31 c0       	rjmp	.+98     	; 0xae2 <Timers_Init+0x106>
     a80:	84 30       	cpi	r24, 0x04	; 4
     a82:	91 05       	cpc	r25, r1
     a84:	01 f1       	breq	.+64     	; 0xac6 <Timers_Init+0xea>
     a86:	84 30       	cpi	r24, 0x04	; 4
     a88:	91 05       	cpc	r25, r1
     a8a:	b4 f0       	brlt	.+44     	; 0xab8 <Timers_Init+0xdc>
     a8c:	05 97       	sbiw	r24, 0x05	; 5
     a8e:	11 f1       	breq	.+68     	; 0xad4 <Timers_Init+0xf8>
     a90:	28 c0       	rjmp	.+80     	; 0xae2 <Timers_Init+0x106>
     a92:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <Gv_PrescallerTimer0_AbsoluteValue+0x1>
     a96:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <Gv_PrescallerTimer0_AbsoluteValue>
     a9a:	23 c0       	rjmp	.+70     	; 0xae2 <Timers_Init+0x106>
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <Gv_PrescallerTimer0_AbsoluteValue+0x1>
     aa4:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <Gv_PrescallerTimer0_AbsoluteValue>
     aa8:	1c c0       	rjmp	.+56     	; 0xae2 <Timers_Init+0x106>
     aaa:	88 e0       	ldi	r24, 0x08	; 8
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <Gv_PrescallerTimer0_AbsoluteValue+0x1>
     ab2:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <Gv_PrescallerTimer0_AbsoluteValue>
     ab6:	15 c0       	rjmp	.+42     	; 0xae2 <Timers_Init+0x106>
     ab8:	80 e4       	ldi	r24, 0x40	; 64
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <Gv_PrescallerTimer0_AbsoluteValue+0x1>
     ac0:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <Gv_PrescallerTimer0_AbsoluteValue>
     ac4:	0e c0       	rjmp	.+28     	; 0xae2 <Timers_Init+0x106>
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	91 e0       	ldi	r25, 0x01	; 1
     aca:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <Gv_PrescallerTimer0_AbsoluteValue+0x1>
     ace:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <Gv_PrescallerTimer0_AbsoluteValue>
     ad2:	07 c0       	rjmp	.+14     	; 0xae2 <Timers_Init+0x106>
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	94 e0       	ldi	r25, 0x04	; 4
     ad8:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <Gv_PrescallerTimer0_AbsoluteValue+0x1>
     adc:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <Gv_PrescallerTimer0_AbsoluteValue>
     ae0:	00 00       	nop
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	89 83       	std	Y+1, r24	; 0x01
     ae6:	cb c0       	rjmp	.+406    	; 0xc7e <Timers_Init+0x2a2>
     ae8:	8f e4       	ldi	r24, 0x4F	; 79
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	2f e4       	ldi	r18, 0x4F	; 79
     aee:	30 e0       	ldi	r19, 0x00	; 0
     af0:	f9 01       	movw	r30, r18
     af2:	20 81       	ld	r18, Z
     af4:	42 2f       	mov	r20, r18
     af6:	2a 81       	ldd	r18, Y+2	; 0x02
     af8:	3b 81       	ldd	r19, Y+3	; 0x03
     afa:	f9 01       	movw	r30, r18
     afc:	21 81       	ldd	r18, Z+1	; 0x01
     afe:	23 70       	andi	r18, 0x03	; 3
     b00:	24 2b       	or	r18, r20
     b02:	fc 01       	movw	r30, r24
     b04:	20 83       	st	Z, r18
     b06:	8e e4       	ldi	r24, 0x4E	; 78
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	2e e4       	ldi	r18, 0x4E	; 78
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	f9 01       	movw	r30, r18
     b10:	20 81       	ld	r18, Z
     b12:	42 2f       	mov	r20, r18
     b14:	2a 81       	ldd	r18, Y+2	; 0x02
     b16:	3b 81       	ldd	r19, Y+3	; 0x03
     b18:	f9 01       	movw	r30, r18
     b1a:	21 81       	ldd	r18, Z+1	; 0x01
     b1c:	28 71       	andi	r18, 0x18	; 24
     b1e:	24 2b       	or	r18, r20
     b20:	fc 01       	movw	r30, r24
     b22:	20 83       	st	Z, r18
     b24:	89 e5       	ldi	r24, 0x59	; 89
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	29 e5       	ldi	r18, 0x59	; 89
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	f9 01       	movw	r30, r18
     b2e:	20 81       	ld	r18, Z
     b30:	24 60       	ori	r18, 0x04	; 4
     b32:	fc 01       	movw	r30, r24
     b34:	20 83       	st	Z, r18
     b36:	0e 94 dd 04 	call	0x9ba	; 0x9ba <Interrupts_On>
     b3a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Gv_PrescallerTimer1_Mask>
     b3e:	88 2f       	mov	r24, r24
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	82 30       	cpi	r24, 0x02	; 2
     b44:	91 05       	cpc	r25, r1
     b46:	e9 f0       	breq	.+58     	; 0xb82 <Timers_Init+0x1a6>
     b48:	83 30       	cpi	r24, 0x03	; 3
     b4a:	91 05       	cpc	r25, r1
     b4c:	2c f4       	brge	.+10     	; 0xb58 <Timers_Init+0x17c>
     b4e:	00 97       	sbiw	r24, 0x00	; 0
     b50:	61 f0       	breq	.+24     	; 0xb6a <Timers_Init+0x18e>
     b52:	01 97       	sbiw	r24, 0x01	; 1
     b54:	79 f0       	breq	.+30     	; 0xb74 <Timers_Init+0x198>
     b56:	31 c0       	rjmp	.+98     	; 0xbba <Timers_Init+0x1de>
     b58:	84 30       	cpi	r24, 0x04	; 4
     b5a:	91 05       	cpc	r25, r1
     b5c:	01 f1       	breq	.+64     	; 0xb9e <Timers_Init+0x1c2>
     b5e:	84 30       	cpi	r24, 0x04	; 4
     b60:	91 05       	cpc	r25, r1
     b62:	b4 f0       	brlt	.+44     	; 0xb90 <Timers_Init+0x1b4>
     b64:	05 97       	sbiw	r24, 0x05	; 5
     b66:	11 f1       	breq	.+68     	; 0xbac <Timers_Init+0x1d0>
     b68:	28 c0       	rjmp	.+80     	; 0xbba <Timers_Init+0x1de>
     b6a:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <Gv_PrescallerTimer1_AbsoluteValue+0x1>
     b6e:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <Gv_PrescallerTimer1_AbsoluteValue>
     b72:	23 c0       	rjmp	.+70     	; 0xbba <Timers_Init+0x1de>
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <Gv_PrescallerTimer1_AbsoluteValue+0x1>
     b7c:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <Gv_PrescallerTimer1_AbsoluteValue>
     b80:	1c c0       	rjmp	.+56     	; 0xbba <Timers_Init+0x1de>
     b82:	88 e0       	ldi	r24, 0x08	; 8
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <Gv_PrescallerTimer1_AbsoluteValue+0x1>
     b8a:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <Gv_PrescallerTimer1_AbsoluteValue>
     b8e:	15 c0       	rjmp	.+42     	; 0xbba <Timers_Init+0x1de>
     b90:	80 e4       	ldi	r24, 0x40	; 64
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <Gv_PrescallerTimer1_AbsoluteValue+0x1>
     b98:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <Gv_PrescallerTimer1_AbsoluteValue>
     b9c:	0e c0       	rjmp	.+28     	; 0xbba <Timers_Init+0x1de>
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <Gv_PrescallerTimer1_AbsoluteValue+0x1>
     ba6:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <Gv_PrescallerTimer1_AbsoluteValue>
     baa:	07 c0       	rjmp	.+14     	; 0xbba <Timers_Init+0x1de>
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	94 e0       	ldi	r25, 0x04	; 4
     bb0:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <Gv_PrescallerTimer1_AbsoluteValue+0x1>
     bb4:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <Gv_PrescallerTimer1_AbsoluteValue>
     bb8:	00 00       	nop
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	89 83       	std	Y+1, r24	; 0x01
     bbe:	5f c0       	rjmp	.+190    	; 0xc7e <Timers_Init+0x2a2>
     bc0:	85 e4       	ldi	r24, 0x45	; 69
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	25 e4       	ldi	r18, 0x45	; 69
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	f9 01       	movw	r30, r18
     bca:	40 81       	ld	r20, Z
     bcc:	2a 81       	ldd	r18, Y+2	; 0x02
     bce:	3b 81       	ldd	r19, Y+3	; 0x03
     bd0:	f9 01       	movw	r30, r18
     bd2:	21 81       	ldd	r18, Z+1	; 0x01
     bd4:	24 2b       	or	r18, r20
     bd6:	fc 01       	movw	r30, r24
     bd8:	20 83       	st	Z, r18
     bda:	89 e5       	ldi	r24, 0x59	; 89
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	29 e5       	ldi	r18, 0x59	; 89
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	f9 01       	movw	r30, r18
     be4:	40 81       	ld	r20, Z
     be6:	2a 81       	ldd	r18, Y+2	; 0x02
     be8:	3b 81       	ldd	r19, Y+3	; 0x03
     bea:	f9 01       	movw	r30, r18
     bec:	26 81       	ldd	r18, Z+6	; 0x06
     bee:	24 2b       	or	r18, r20
     bf0:	fc 01       	movw	r30, r24
     bf2:	20 83       	st	Z, r18
     bf4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Gv_PrescallerTimer2_Mask>
     bf8:	88 2f       	mov	r24, r24
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	91 05       	cpc	r25, r1
     c00:	e9 f0       	breq	.+58     	; 0xc3c <Timers_Init+0x260>
     c02:	83 30       	cpi	r24, 0x03	; 3
     c04:	91 05       	cpc	r25, r1
     c06:	2c f4       	brge	.+10     	; 0xc12 <Timers_Init+0x236>
     c08:	00 97       	sbiw	r24, 0x00	; 0
     c0a:	61 f0       	breq	.+24     	; 0xc24 <Timers_Init+0x248>
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	79 f0       	breq	.+30     	; 0xc2e <Timers_Init+0x252>
     c10:	31 c0       	rjmp	.+98     	; 0xc74 <Timers_Init+0x298>
     c12:	86 30       	cpi	r24, 0x06	; 6
     c14:	91 05       	cpc	r25, r1
     c16:	01 f1       	breq	.+64     	; 0xc58 <Timers_Init+0x27c>
     c18:	87 30       	cpi	r24, 0x07	; 7
     c1a:	91 05       	cpc	r25, r1
     c1c:	21 f1       	breq	.+72     	; 0xc66 <Timers_Init+0x28a>
     c1e:	04 97       	sbiw	r24, 0x04	; 4
     c20:	a1 f0       	breq	.+40     	; 0xc4a <Timers_Init+0x26e>
     c22:	28 c0       	rjmp	.+80     	; 0xc74 <Timers_Init+0x298>
     c24:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <Gv_PrescallerTimer2_AbsoluteValue+0x1>
     c28:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <Gv_PrescallerTimer2_AbsoluteValue>
     c2c:	23 c0       	rjmp	.+70     	; 0xc74 <Timers_Init+0x298>
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <Gv_PrescallerTimer2_AbsoluteValue+0x1>
     c36:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <Gv_PrescallerTimer2_AbsoluteValue>
     c3a:	1c c0       	rjmp	.+56     	; 0xc74 <Timers_Init+0x298>
     c3c:	88 e0       	ldi	r24, 0x08	; 8
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <Gv_PrescallerTimer2_AbsoluteValue+0x1>
     c44:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <Gv_PrescallerTimer2_AbsoluteValue>
     c48:	15 c0       	rjmp	.+42     	; 0xc74 <Timers_Init+0x298>
     c4a:	80 e4       	ldi	r24, 0x40	; 64
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <Gv_PrescallerTimer2_AbsoluteValue+0x1>
     c52:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <Gv_PrescallerTimer2_AbsoluteValue>
     c56:	0e c0       	rjmp	.+28     	; 0xc74 <Timers_Init+0x298>
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	91 e0       	ldi	r25, 0x01	; 1
     c5c:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <Gv_PrescallerTimer2_AbsoluteValue+0x1>
     c60:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <Gv_PrescallerTimer2_AbsoluteValue>
     c64:	07 c0       	rjmp	.+14     	; 0xc74 <Timers_Init+0x298>
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	94 e0       	ldi	r25, 0x04	; 4
     c6a:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <Gv_PrescallerTimer2_AbsoluteValue+0x1>
     c6e:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <Gv_PrescallerTimer2_AbsoluteValue>
     c72:	00 00       	nop
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	89 83       	std	Y+1, r24	; 0x01
     c78:	02 c0       	rjmp	.+4      	; 0xc7e <Timers_Init+0x2a2>
     c7a:	19 82       	std	Y+1, r1	; 0x01
     c7c:	00 00       	nop
     c7e:	8a 81       	ldd	r24, Y+2	; 0x02
     c80:	9b 81       	ldd	r25, Y+3	; 0x03
     c82:	fc 01       	movw	r30, r24
     c84:	82 81       	ldd	r24, Z+2	; 0x02
     c86:	93 81       	ldd	r25, Z+3	; 0x03
     c88:	a4 81       	ldd	r26, Z+4	; 0x04
     c8a:	b5 81       	ldd	r27, Z+5	; 0x05
     c8c:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <Gv_Count+0x1>
     c90:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <Gv_Count>
     c94:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <Gv_Count>
     c98:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <Gv_Count+0x1>
     c9c:	cc 01       	movw	r24, r24
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	2a 81       	ldd	r18, Y+2	; 0x02
     ca4:	3b 81       	ldd	r19, Y+3	; 0x03
     ca6:	f9 01       	movw	r30, r18
     ca8:	20 81       	ld	r18, Z
     caa:	ac 01       	movw	r20, r24
     cac:	bd 01       	movw	r22, r26
     cae:	82 2f       	mov	r24, r18
     cb0:	0e 94 61 06 	call	0xcc2	; 0xcc2 <Timers_SetCounter>
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	08 95       	ret

00000cc2 <Timers_SetCounter>:
     cc2:	cf 93       	push	r28
     cc4:	df 93       	push	r29
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
     cca:	2d 97       	sbiw	r28, 0x0d	; 13
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	f8 94       	cli
     cd0:	de bf       	out	0x3e, r29	; 62
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	cd bf       	out	0x3d, r28	; 61
     cd6:	89 87       	std	Y+9, r24	; 0x09
     cd8:	4a 87       	std	Y+10, r20	; 0x0a
     cda:	5b 87       	std	Y+11, r21	; 0x0b
     cdc:	6c 87       	std	Y+12, r22	; 0x0c
     cde:	7d 87       	std	Y+13, r23	; 0x0d
     ce0:	19 82       	std	Y+1, r1	; 0x01
     ce2:	1a 82       	std	Y+2, r1	; 0x02
     ce4:	1b 82       	std	Y+3, r1	; 0x03
     ce6:	1c 82       	std	Y+4, r1	; 0x04
     ce8:	89 85       	ldd	r24, Y+9	; 0x09
     cea:	88 2f       	mov	r24, r24
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	81 30       	cpi	r24, 0x01	; 1
     cf0:	91 05       	cpc	r25, r1
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <Timers_SetCounter+0x34>
     cf4:	61 c0       	rjmp	.+194    	; 0xdb8 <Timers_SetCounter+0xf6>
     cf6:	82 30       	cpi	r24, 0x02	; 2
     cf8:	91 05       	cpc	r25, r1
     cfa:	09 f4       	brne	.+2      	; 0xcfe <Timers_SetCounter+0x3c>
     cfc:	bd c0       	rjmp	.+378    	; 0xe78 <Timers_SetCounter+0x1b6>
     cfe:	89 2b       	or	r24, r25
     d00:	09 f0       	breq	.+2      	; 0xd04 <Timers_SetCounter+0x42>
     d02:	14 c1       	rjmp	.+552    	; 0xf2c <Timers_SetCounter+0x26a>
     d04:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <Gv_PrescallerTimer0_AbsoluteValue>
     d08:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <Gv_PrescallerTimer0_AbsoluteValue+0x1>
     d0c:	cc 01       	movw	r24, r24
     d0e:	a0 e0       	ldi	r26, 0x00	; 0
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	9c 01       	movw	r18, r24
     d14:	ad 01       	movw	r20, r26
     d16:	60 e4       	ldi	r22, 0x40	; 64
     d18:	72 e4       	ldi	r23, 0x42	; 66
     d1a:	8f e0       	ldi	r24, 0x0F	; 15
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	0e 94 3f 08 	call	0x107e	; 0x107e <__mulsi3>
     d22:	dc 01       	movw	r26, r24
     d24:	cb 01       	movw	r24, r22
     d26:	20 91 94 00 	lds	r18, 0x0094	; 0x800094 <Gv_F_CPU>
     d2a:	30 91 95 00 	lds	r19, 0x0095	; 0x800095 <Gv_F_CPU+0x1>
     d2e:	40 91 96 00 	lds	r20, 0x0096	; 0x800096 <Gv_F_CPU+0x2>
     d32:	50 91 97 00 	lds	r21, 0x0097	; 0x800097 <Gv_F_CPU+0x3>
     d36:	bc 01       	movw	r22, r24
     d38:	cd 01       	movw	r24, r26
     d3a:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__udivmodsi4>
     d3e:	da 01       	movw	r26, r20
     d40:	c9 01       	movw	r24, r18
     d42:	9c 01       	movw	r18, r24
     d44:	ad 01       	movw	r20, r26
     d46:	8a 85       	ldd	r24, Y+10	; 0x0a
     d48:	9b 85       	ldd	r25, Y+11	; 0x0b
     d4a:	ac 85       	ldd	r26, Y+12	; 0x0c
     d4c:	bd 85       	ldd	r27, Y+13	; 0x0d
     d4e:	bc 01       	movw	r22, r24
     d50:	cd 01       	movw	r24, r26
     d52:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__udivmodsi4>
     d56:	da 01       	movw	r26, r20
     d58:	c9 01       	movw	r24, r18
     d5a:	8d 83       	std	Y+5, r24	; 0x05
     d5c:	9e 83       	std	Y+6, r25	; 0x06
     d5e:	af 83       	std	Y+7, r26	; 0x07
     d60:	b8 87       	std	Y+8, r27	; 0x08
     d62:	8d 81       	ldd	r24, Y+5	; 0x05
     d64:	9e 81       	ldd	r25, Y+6	; 0x06
     d66:	af 81       	ldd	r26, Y+7	; 0x07
     d68:	b8 85       	ldd	r27, Y+8	; 0x08
     d6a:	81 30       	cpi	r24, 0x01	; 1
     d6c:	91 40       	sbci	r25, 0x01	; 1
     d6e:	a1 05       	cpc	r26, r1
     d70:	b1 05       	cpc	r27, r1
     d72:	28 f0       	brcs	.+10     	; 0xd7e <Timers_SetCounter+0xbc>
     d74:	19 82       	std	Y+1, r1	; 0x01
     d76:	1a 82       	std	Y+2, r1	; 0x02
     d78:	1b 82       	std	Y+3, r1	; 0x03
     d7a:	1c 82       	std	Y+4, r1	; 0x04
     d7c:	dc c0       	rjmp	.+440    	; 0xf36 <Timers_SetCounter+0x274>
     d7e:	8d 81       	ldd	r24, Y+5	; 0x05
     d80:	9e 81       	ldd	r25, Y+6	; 0x06
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	31 e0       	ldi	r19, 0x01	; 1
     d86:	a9 01       	movw	r20, r18
     d88:	48 1b       	sub	r20, r24
     d8a:	59 0b       	sbc	r21, r25
     d8c:	ca 01       	movw	r24, r20
     d8e:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <Gv_Count+0x1>
     d92:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <Gv_Count>
     d96:	82 e5       	ldi	r24, 0x52	; 82
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	20 91 98 00 	lds	r18, 0x0098	; 0x800098 <Gv_Count>
     d9e:	30 91 99 00 	lds	r19, 0x0099	; 0x800099 <Gv_Count+0x1>
     da2:	fc 01       	movw	r30, r24
     da4:	20 83       	st	Z, r18
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	a0 e0       	ldi	r26, 0x00	; 0
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	89 83       	std	Y+1, r24	; 0x01
     db0:	9a 83       	std	Y+2, r25	; 0x02
     db2:	ab 83       	std	Y+3, r26	; 0x03
     db4:	bc 83       	std	Y+4, r27	; 0x04
     db6:	bf c0       	rjmp	.+382    	; 0xf36 <Timers_SetCounter+0x274>
     db8:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <Gv_PrescallerTimer1_AbsoluteValue>
     dbc:	90 91 a2 00 	lds	r25, 0x00A2	; 0x8000a2 <Gv_PrescallerTimer1_AbsoluteValue+0x1>
     dc0:	cc 01       	movw	r24, r24
     dc2:	a0 e0       	ldi	r26, 0x00	; 0
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	9c 01       	movw	r18, r24
     dc8:	ad 01       	movw	r20, r26
     dca:	60 e4       	ldi	r22, 0x40	; 64
     dcc:	72 e4       	ldi	r23, 0x42	; 66
     dce:	8f e0       	ldi	r24, 0x0F	; 15
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	0e 94 3f 08 	call	0x107e	; 0x107e <__mulsi3>
     dd6:	dc 01       	movw	r26, r24
     dd8:	cb 01       	movw	r24, r22
     dda:	20 91 94 00 	lds	r18, 0x0094	; 0x800094 <Gv_F_CPU>
     dde:	30 91 95 00 	lds	r19, 0x0095	; 0x800095 <Gv_F_CPU+0x1>
     de2:	40 91 96 00 	lds	r20, 0x0096	; 0x800096 <Gv_F_CPU+0x2>
     de6:	50 91 97 00 	lds	r21, 0x0097	; 0x800097 <Gv_F_CPU+0x3>
     dea:	bc 01       	movw	r22, r24
     dec:	cd 01       	movw	r24, r26
     dee:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__udivmodsi4>
     df2:	da 01       	movw	r26, r20
     df4:	c9 01       	movw	r24, r18
     df6:	9c 01       	movw	r18, r24
     df8:	ad 01       	movw	r20, r26
     dfa:	8a 85       	ldd	r24, Y+10	; 0x0a
     dfc:	9b 85       	ldd	r25, Y+11	; 0x0b
     dfe:	ac 85       	ldd	r26, Y+12	; 0x0c
     e00:	bd 85       	ldd	r27, Y+13	; 0x0d
     e02:	bc 01       	movw	r22, r24
     e04:	cd 01       	movw	r24, r26
     e06:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__udivmodsi4>
     e0a:	da 01       	movw	r26, r20
     e0c:	c9 01       	movw	r24, r18
     e0e:	8d 83       	std	Y+5, r24	; 0x05
     e10:	9e 83       	std	Y+6, r25	; 0x06
     e12:	af 83       	std	Y+7, r26	; 0x07
     e14:	b8 87       	std	Y+8, r27	; 0x08
     e16:	8d 81       	ldd	r24, Y+5	; 0x05
     e18:	9e 81       	ldd	r25, Y+6	; 0x06
     e1a:	af 81       	ldd	r26, Y+7	; 0x07
     e1c:	b8 85       	ldd	r27, Y+8	; 0x08
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	a1 40       	sbci	r26, 0x01	; 1
     e22:	b1 05       	cpc	r27, r1
     e24:	28 f0       	brcs	.+10     	; 0xe30 <Timers_SetCounter+0x16e>
     e26:	19 82       	std	Y+1, r1	; 0x01
     e28:	1a 82       	std	Y+2, r1	; 0x02
     e2a:	1b 82       	std	Y+3, r1	; 0x03
     e2c:	1c 82       	std	Y+4, r1	; 0x04
     e2e:	83 c0       	rjmp	.+262    	; 0xf36 <Timers_SetCounter+0x274>
     e30:	8d 81       	ldd	r24, Y+5	; 0x05
     e32:	9e 81       	ldd	r25, Y+6	; 0x06
     e34:	91 95       	neg	r25
     e36:	81 95       	neg	r24
     e38:	91 09       	sbc	r25, r1
     e3a:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <Gv_Count+0x1>
     e3e:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <Gv_Count>
     e42:	8d e4       	ldi	r24, 0x4D	; 77
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	20 91 98 00 	lds	r18, 0x0098	; 0x800098 <Gv_Count>
     e4a:	30 91 99 00 	lds	r19, 0x0099	; 0x800099 <Gv_Count+0x1>
     e4e:	23 2f       	mov	r18, r19
     e50:	33 27       	eor	r19, r19
     e52:	fc 01       	movw	r30, r24
     e54:	20 83       	st	Z, r18
     e56:	8c e4       	ldi	r24, 0x4C	; 76
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	20 91 98 00 	lds	r18, 0x0098	; 0x800098 <Gv_Count>
     e5e:	30 91 99 00 	lds	r19, 0x0099	; 0x800099 <Gv_Count+0x1>
     e62:	fc 01       	movw	r30, r24
     e64:	20 83       	st	Z, r18
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	a0 e0       	ldi	r26, 0x00	; 0
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	89 83       	std	Y+1, r24	; 0x01
     e70:	9a 83       	std	Y+2, r25	; 0x02
     e72:	ab 83       	std	Y+3, r26	; 0x03
     e74:	bc 83       	std	Y+4, r27	; 0x04
     e76:	5f c0       	rjmp	.+190    	; 0xf36 <Timers_SetCounter+0x274>
     e78:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <Gv_PrescallerTimer2_AbsoluteValue>
     e7c:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <Gv_PrescallerTimer2_AbsoluteValue+0x1>
     e80:	cc 01       	movw	r24, r24
     e82:	a0 e0       	ldi	r26, 0x00	; 0
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	9c 01       	movw	r18, r24
     e88:	ad 01       	movw	r20, r26
     e8a:	60 e4       	ldi	r22, 0x40	; 64
     e8c:	72 e4       	ldi	r23, 0x42	; 66
     e8e:	8f e0       	ldi	r24, 0x0F	; 15
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	0e 94 3f 08 	call	0x107e	; 0x107e <__mulsi3>
     e96:	dc 01       	movw	r26, r24
     e98:	cb 01       	movw	r24, r22
     e9a:	20 91 94 00 	lds	r18, 0x0094	; 0x800094 <Gv_F_CPU>
     e9e:	30 91 95 00 	lds	r19, 0x0095	; 0x800095 <Gv_F_CPU+0x1>
     ea2:	40 91 96 00 	lds	r20, 0x0096	; 0x800096 <Gv_F_CPU+0x2>
     ea6:	50 91 97 00 	lds	r21, 0x0097	; 0x800097 <Gv_F_CPU+0x3>
     eaa:	bc 01       	movw	r22, r24
     eac:	cd 01       	movw	r24, r26
     eae:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__udivmodsi4>
     eb2:	da 01       	movw	r26, r20
     eb4:	c9 01       	movw	r24, r18
     eb6:	9c 01       	movw	r18, r24
     eb8:	ad 01       	movw	r20, r26
     eba:	8a 85       	ldd	r24, Y+10	; 0x0a
     ebc:	9b 85       	ldd	r25, Y+11	; 0x0b
     ebe:	ac 85       	ldd	r26, Y+12	; 0x0c
     ec0:	bd 85       	ldd	r27, Y+13	; 0x0d
     ec2:	bc 01       	movw	r22, r24
     ec4:	cd 01       	movw	r24, r26
     ec6:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__udivmodsi4>
     eca:	da 01       	movw	r26, r20
     ecc:	c9 01       	movw	r24, r18
     ece:	8d 83       	std	Y+5, r24	; 0x05
     ed0:	9e 83       	std	Y+6, r25	; 0x06
     ed2:	af 83       	std	Y+7, r26	; 0x07
     ed4:	b8 87       	std	Y+8, r27	; 0x08
     ed6:	8d 81       	ldd	r24, Y+5	; 0x05
     ed8:	9e 81       	ldd	r25, Y+6	; 0x06
     eda:	af 81       	ldd	r26, Y+7	; 0x07
     edc:	b8 85       	ldd	r27, Y+8	; 0x08
     ede:	81 30       	cpi	r24, 0x01	; 1
     ee0:	91 40       	sbci	r25, 0x01	; 1
     ee2:	a1 05       	cpc	r26, r1
     ee4:	b1 05       	cpc	r27, r1
     ee6:	28 f0       	brcs	.+10     	; 0xef2 <Timers_SetCounter+0x230>
     ee8:	19 82       	std	Y+1, r1	; 0x01
     eea:	1a 82       	std	Y+2, r1	; 0x02
     eec:	1b 82       	std	Y+3, r1	; 0x03
     eee:	1c 82       	std	Y+4, r1	; 0x04
     ef0:	22 c0       	rjmp	.+68     	; 0xf36 <Timers_SetCounter+0x274>
     ef2:	8d 81       	ldd	r24, Y+5	; 0x05
     ef4:	9e 81       	ldd	r25, Y+6	; 0x06
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	31 e0       	ldi	r19, 0x01	; 1
     efa:	a9 01       	movw	r20, r18
     efc:	48 1b       	sub	r20, r24
     efe:	59 0b       	sbc	r21, r25
     f00:	ca 01       	movw	r24, r20
     f02:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <Gv_Count+0x1>
     f06:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <Gv_Count>
     f0a:	84 e4       	ldi	r24, 0x44	; 68
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	20 91 98 00 	lds	r18, 0x0098	; 0x800098 <Gv_Count>
     f12:	30 91 99 00 	lds	r19, 0x0099	; 0x800099 <Gv_Count+0x1>
     f16:	fc 01       	movw	r30, r24
     f18:	20 83       	st	Z, r18
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	a0 e0       	ldi	r26, 0x00	; 0
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	89 83       	std	Y+1, r24	; 0x01
     f24:	9a 83       	std	Y+2, r25	; 0x02
     f26:	ab 83       	std	Y+3, r26	; 0x03
     f28:	bc 83       	std	Y+4, r27	; 0x04
     f2a:	05 c0       	rjmp	.+10     	; 0xf36 <Timers_SetCounter+0x274>
     f2c:	19 82       	std	Y+1, r1	; 0x01
     f2e:	1a 82       	std	Y+2, r1	; 0x02
     f30:	1b 82       	std	Y+3, r1	; 0x03
     f32:	1c 82       	std	Y+4, r1	; 0x04
     f34:	00 00       	nop
     f36:	8a 85       	ldd	r24, Y+10	; 0x0a
     f38:	9b 85       	ldd	r25, Y+11	; 0x0b
     f3a:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <Gv_Count+0x1>
     f3e:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <Gv_Count>
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	2d 96       	adiw	r28, 0x0d	; 13
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	08 95       	ret

00000f56 <Timers_Start>:
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	1f 92       	push	r1
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
     f60:	89 83       	std	Y+1, r24	; 0x01
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	81 30       	cpi	r24, 0x01	; 1
     f6a:	91 05       	cpc	r25, r1
     f6c:	99 f0       	breq	.+38     	; 0xf94 <Timers_Start+0x3e>
     f6e:	82 30       	cpi	r24, 0x02	; 2
     f70:	91 05       	cpc	r25, r1
     f72:	e9 f0       	breq	.+58     	; 0xfae <Timers_Start+0x58>
     f74:	89 2b       	or	r24, r25
     f76:	09 f0       	breq	.+2      	; 0xf7a <Timers_Start+0x24>
     f78:	27 c0       	rjmp	.+78     	; 0xfc8 <Timers_Start+0x72>
     f7a:	83 e5       	ldi	r24, 0x53	; 83
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	23 e5       	ldi	r18, 0x53	; 83
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	f9 01       	movw	r30, r18
     f84:	20 81       	ld	r18, Z
     f86:	28 7f       	andi	r18, 0xF8	; 248
     f88:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <Gv_PrescallerTimer0_Mask>
     f8c:	23 2b       	or	r18, r19
     f8e:	fc 01       	movw	r30, r24
     f90:	20 83       	st	Z, r18
     f92:	1a c0       	rjmp	.+52     	; 0xfc8 <Timers_Start+0x72>
     f94:	8e e4       	ldi	r24, 0x4E	; 78
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	2e e4       	ldi	r18, 0x4E	; 78
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	f9 01       	movw	r30, r18
     f9e:	20 81       	ld	r18, Z
     fa0:	28 7f       	andi	r18, 0xF8	; 248
     fa2:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <Gv_PrescallerTimer1_Mask>
     fa6:	23 2b       	or	r18, r19
     fa8:	fc 01       	movw	r30, r24
     faa:	20 83       	st	Z, r18
     fac:	0d c0       	rjmp	.+26     	; 0xfc8 <Timers_Start+0x72>
     fae:	85 e4       	ldi	r24, 0x45	; 69
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	25 e4       	ldi	r18, 0x45	; 69
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	f9 01       	movw	r30, r18
     fb8:	20 81       	ld	r18, Z
     fba:	28 7f       	andi	r18, 0xF8	; 248
     fbc:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <Gv_PrescallerTimer2_Mask>
     fc0:	23 2b       	or	r18, r19
     fc2:	fc 01       	movw	r30, r24
     fc4:	20 83       	st	Z, r18
     fc6:	00 00       	nop
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	0f 90       	pop	r0
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	08 95       	ret

00000fd2 <Timers_SetCallBack>:
 * Function : Timers_SetCallBack
 * Description: This function is used to set the Call Back Function in the Timer
 * @return void
 */
void Timers_SetCallBack(v_PtrFunc_v_type FuncName)
{
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	00 d0       	rcall	.+0      	; 0xfd8 <Timers_SetCallBack+0x6>
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	9a 83       	std	Y+2, r25	; 0x02
     fde:	89 83       	std	Y+1, r24	; 0x01
	gPtrCallBk = FuncName;
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	9a 81       	ldd	r25, Y+2	; 0x02
     fe4:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <gPtrCallBk+0x1>
     fe8:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <gPtrCallBk>
}
     fec:	00 00       	nop
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28
     ff6:	08 95       	ret

00000ff8 <__vector_9>:


ISR_T(TIMER1_OVF_vect)
{
     ff8:	1f 92       	push	r1
     ffa:	0f 92       	push	r0
     ffc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1000:	0f 92       	push	r0
    1002:	11 24       	eor	r1, r1
    1004:	2f 93       	push	r18
    1006:	3f 93       	push	r19
    1008:	4f 93       	push	r20
    100a:	5f 93       	push	r21
    100c:	6f 93       	push	r22
    100e:	7f 93       	push	r23
    1010:	8f 93       	push	r24
    1012:	9f 93       	push	r25
    1014:	af 93       	push	r26
    1016:	bf 93       	push	r27
    1018:	ef 93       	push	r30
    101a:	ff 93       	push	r31
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
	if(gPtrCallBk != NULL)
    1024:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <gPtrCallBk>
    1028:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <gPtrCallBk+0x1>
    102c:	89 2b       	or	r24, r25
    102e:	31 f0       	breq	.+12     	; 0x103c <__vector_9+0x44>
	{
		gPtrCallBk();
    1030:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <gPtrCallBk>
    1034:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <gPtrCallBk+0x1>
    1038:	fc 01       	movw	r30, r24
    103a:	09 95       	icall
	}
	else
	{
		// Do Nothing	
	}
	Timers_SetCounter(TIMER1,Gv_Count);
    103c:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <Gv_Count>
    1040:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <Gv_Count+0x1>
    1044:	cc 01       	movw	r24, r24
    1046:	a0 e0       	ldi	r26, 0x00	; 0
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	ac 01       	movw	r20, r24
    104c:	bd 01       	movw	r22, r26
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	0e 94 61 06 	call	0xcc2	; 0xcc2 <Timers_SetCounter>
    1054:	00 00       	nop
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	ff 91       	pop	r31
    105c:	ef 91       	pop	r30
    105e:	bf 91       	pop	r27
    1060:	af 91       	pop	r26
    1062:	9f 91       	pop	r25
    1064:	8f 91       	pop	r24
    1066:	7f 91       	pop	r23
    1068:	6f 91       	pop	r22
    106a:	5f 91       	pop	r21
    106c:	4f 91       	pop	r20
    106e:	3f 91       	pop	r19
    1070:	2f 91       	pop	r18
    1072:	0f 90       	pop	r0
    1074:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1078:	0f 90       	pop	r0
    107a:	1f 90       	pop	r1
    107c:	18 95       	reti

0000107e <__mulsi3>:
    107e:	db 01       	movw	r26, r22
    1080:	8f 93       	push	r24
    1082:	9f 93       	push	r25
    1084:	0e 94 85 08 	call	0x110a	; 0x110a <__muluhisi3>
    1088:	bf 91       	pop	r27
    108a:	af 91       	pop	r26
    108c:	a2 9f       	mul	r26, r18
    108e:	80 0d       	add	r24, r0
    1090:	91 1d       	adc	r25, r1
    1092:	a3 9f       	mul	r26, r19
    1094:	90 0d       	add	r25, r0
    1096:	b2 9f       	mul	r27, r18
    1098:	90 0d       	add	r25, r0
    109a:	11 24       	eor	r1, r1
    109c:	08 95       	ret

0000109e <__udivmodhi4>:
    109e:	aa 1b       	sub	r26, r26
    10a0:	bb 1b       	sub	r27, r27
    10a2:	51 e1       	ldi	r21, 0x11	; 17
    10a4:	07 c0       	rjmp	.+14     	; 0x10b4 <__udivmodhi4_ep>

000010a6 <__udivmodhi4_loop>:
    10a6:	aa 1f       	adc	r26, r26
    10a8:	bb 1f       	adc	r27, r27
    10aa:	a6 17       	cp	r26, r22
    10ac:	b7 07       	cpc	r27, r23
    10ae:	10 f0       	brcs	.+4      	; 0x10b4 <__udivmodhi4_ep>
    10b0:	a6 1b       	sub	r26, r22
    10b2:	b7 0b       	sbc	r27, r23

000010b4 <__udivmodhi4_ep>:
    10b4:	88 1f       	adc	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	5a 95       	dec	r21
    10ba:	a9 f7       	brne	.-22     	; 0x10a6 <__udivmodhi4_loop>
    10bc:	80 95       	com	r24
    10be:	90 95       	com	r25
    10c0:	bc 01       	movw	r22, r24
    10c2:	cd 01       	movw	r24, r26
    10c4:	08 95       	ret

000010c6 <__udivmodsi4>:
    10c6:	a1 e2       	ldi	r26, 0x21	; 33
    10c8:	1a 2e       	mov	r1, r26
    10ca:	aa 1b       	sub	r26, r26
    10cc:	bb 1b       	sub	r27, r27
    10ce:	fd 01       	movw	r30, r26
    10d0:	0d c0       	rjmp	.+26     	; 0x10ec <__udivmodsi4_ep>

000010d2 <__udivmodsi4_loop>:
    10d2:	aa 1f       	adc	r26, r26
    10d4:	bb 1f       	adc	r27, r27
    10d6:	ee 1f       	adc	r30, r30
    10d8:	ff 1f       	adc	r31, r31
    10da:	a2 17       	cp	r26, r18
    10dc:	b3 07       	cpc	r27, r19
    10de:	e4 07       	cpc	r30, r20
    10e0:	f5 07       	cpc	r31, r21
    10e2:	20 f0       	brcs	.+8      	; 0x10ec <__udivmodsi4_ep>
    10e4:	a2 1b       	sub	r26, r18
    10e6:	b3 0b       	sbc	r27, r19
    10e8:	e4 0b       	sbc	r30, r20
    10ea:	f5 0b       	sbc	r31, r21

000010ec <__udivmodsi4_ep>:
    10ec:	66 1f       	adc	r22, r22
    10ee:	77 1f       	adc	r23, r23
    10f0:	88 1f       	adc	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	1a 94       	dec	r1
    10f6:	69 f7       	brne	.-38     	; 0x10d2 <__udivmodsi4_loop>
    10f8:	60 95       	com	r22
    10fa:	70 95       	com	r23
    10fc:	80 95       	com	r24
    10fe:	90 95       	com	r25
    1100:	9b 01       	movw	r18, r22
    1102:	ac 01       	movw	r20, r24
    1104:	bd 01       	movw	r22, r26
    1106:	cf 01       	movw	r24, r30
    1108:	08 95       	ret

0000110a <__muluhisi3>:
    110a:	0e 94 90 08 	call	0x1120	; 0x1120 <__umulhisi3>
    110e:	a5 9f       	mul	r26, r21
    1110:	90 0d       	add	r25, r0
    1112:	b4 9f       	mul	r27, r20
    1114:	90 0d       	add	r25, r0
    1116:	a4 9f       	mul	r26, r20
    1118:	80 0d       	add	r24, r0
    111a:	91 1d       	adc	r25, r1
    111c:	11 24       	eor	r1, r1
    111e:	08 95       	ret

00001120 <__umulhisi3>:
    1120:	a2 9f       	mul	r26, r18
    1122:	b0 01       	movw	r22, r0
    1124:	b3 9f       	mul	r27, r19
    1126:	c0 01       	movw	r24, r0
    1128:	a3 9f       	mul	r26, r19
    112a:	70 0d       	add	r23, r0
    112c:	81 1d       	adc	r24, r1
    112e:	11 24       	eor	r1, r1
    1130:	91 1d       	adc	r25, r1
    1132:	b2 9f       	mul	r27, r18
    1134:	70 0d       	add	r23, r0
    1136:	81 1d       	adc	r24, r1
    1138:	11 24       	eor	r1, r1
    113a:	91 1d       	adc	r25, r1
    113c:	08 95       	ret

0000113e <_exit>:
    113e:	f8 94       	cli

00001140 <__stop_program>:
    1140:	ff cf       	rjmp	.-2      	; 0x1140 <__stop_program>
